This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-03T19:47:48.586Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
collegefootballstats.client/.gitignore
collegefootballstats.client/collegefootballstats.client.esproj
collegefootballstats.client/eslint.config.js
collegefootballstats.client/index.html
collegefootballstats.client/nuget.config
collegefootballstats.client/package.json
collegefootballstats.client/public/vite.svg
collegefootballstats.client/README.md
collegefootballstats.client/src/App.css
collegefootballstats.client/src/App.jsx
collegefootballstats.client/src/assets/react.svg
collegefootballstats.client/src/components/AnalysisCard.jsx
collegefootballstats.client/src/components/CoachingImpactVisualization.jsx
collegefootballstats.client/src/components/Header.jsx
collegefootballstats.client/src/index.css
collegefootballstats.client/src/main.jsx
collegefootballstats.client/src/pages/ConferenceClash.jsx
collegefootballstats.client/src/pages/DraftDayDividends.jsx
collegefootballstats.client/src/pages/Feedback.jsx
collegefootballstats.client/src/pages/GameChangers.jsx
collegefootballstats.client/src/pages/Home.jsx
collegefootballstats.client/src/pages/SidelineShuffle.jsx
collegefootballstats.client/src/pages/StarPower.jsx
collegefootballstats.client/vite.config.js
CollegeFootballStats.Core/CollegeFootballStats.Core.csproj
CollegeFootballStats.Core/ISqlCommand.cs
CollegeFootballStats.Core/Models/Entities.cs
CollegeFootballStats.Core/Queries/CoachingImpact.cs
CollegeFootballStats.Core/Queries/CountTuplesByTable.cs
CollegeFootballStats.Core/Queries/GetAllCoaches.cs
CollegeFootballStats.Core/Queries/GetAllConferences.cs
CollegeFootballStats.Core/Queries/GetAllPlayerPositions.cs
CollegeFootballStats.Core/Queries/GetAllPlayers.cs
CollegeFootballStats.Core/Queries/GetAllTeams.cs
CollegeFootballStats.Core/Queries/GetCoachesByTeam.cs
CollegeFootballStats.Core/Queries/GetStatCategories.cs
CollegeFootballStats.Core/Queries/GetStatTypes.cs
CollegeFootballStats.Core/Queries/GetTeamByAbbreviation.cs
CollegeFootballStats.Core/Queries/GetTeamDraftPerformance.cs
CollegeFootballStats.Core/Queries/GetTeamRecruitingAndDraft.cs
CollegeFootballStats.Core/Queries/InsertCoach.cs
CollegeFootballStats.Core/Queries/InsertCoachingRecord.cs
CollegeFootballStats.Core/Queries/InsertConference.cs
CollegeFootballStats.Core/Queries/InsertDraftPick.cs
CollegeFootballStats.Core/Queries/InsertGame.cs
CollegeFootballStats.Core/Queries/InsertPlayerAndRoster.cs
CollegeFootballStats.Core/Queries/InsertPlayerSeasonStat.cs
CollegeFootballStats.Core/Queries/InsertPoll.cs
CollegeFootballStats.Core/Queries/InsertStatCategory.cs
CollegeFootballStats.Core/Queries/InsertStatType.cs
CollegeFootballStats.Core/Queries/InsertTeam.cs
CollegeFootballStats.Core/Queries/InsertTeamGameStat.cs
CollegeFootballStats.Core/Scripts/Grants.sql
CollegeFootballStats.Core/Scripts/Tables.sql
CollegeFootballStats.Core/SqlCommandBase.cs
CollegeFootballStats.Core/SqlCommandManager.cs
CollegeFootballStats.Core/TypeHandlers.cs
CollegeFootballStats.Importer/ApiModels.cs
CollegeFootballStats.Importer/BaseImporter.cs
CollegeFootballStats.Importer/CoachesImporter.cs
CollegeFootballStats.Importer/CollegeFootballStats.Importer.csproj
CollegeFootballStats.Importer/Committer.cs
CollegeFootballStats.Importer/ConferenceMembershipsImporter.cs
CollegeFootballStats.Importer/ConferencesImporter.cs
CollegeFootballStats.Importer/DraftPicksImporter.cs
CollegeFootballStats.Importer/GamesImporter.cs
CollegeFootballStats.Importer/ImporterConfig.cs
CollegeFootballStats.Importer/PlayerGameStatsImporter.cs
CollegeFootballStats.Importer/PlayerSeasonStatsImporter.cs
CollegeFootballStats.Importer/PlayersImporter.cs
CollegeFootballStats.Importer/PollsImporter.cs
CollegeFootballStats.Importer/Program.cs
CollegeFootballStats.Importer/TeamGameStatsImporter.cs
CollegeFootballStats.Importer/TeamsImporter.cs
CollegeFootballStats.Server/appsettings.Development.json
CollegeFootballStats.Server/appsettings.json
CollegeFootballStats.Server/CollegeFootballStats.Server.csproj
CollegeFootballStats.Server/CollegeFootballStats.Server.http
CollegeFootballStats.Server/Program.cs
CollegeFootballStats.Server/Properties/launchSettings.json
CollegeFootballStats.Server/ResponseModels.cs
CollegeFootballStats.sln
package.json
README.md

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Created by https://www.toptal.com/developers/gitignore/api/react,csharp,dotnetcore,aspnetcore,visualstudio,visualstudiocode,node
# Edit at https://www.toptal.com/developers/gitignore?templates=react,csharp,dotnetcore,aspnetcore,visualstudio,visualstudiocode,node

### ASPNETCore ###
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.

# User-specific files
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Visual Studio 2015 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUNIT
*.VisualState.xml
TestResult.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# DNX
project.lock.json
project.fragment.lock.json
artifacts/

*_i.c
*_p.c
*_i.h
*.ilk
*.meta
*.obj
*.pch
*.pdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# JustCode is a .NET coding add-in
.JustCode

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# TODO: Comment the next line if you want to checkin your web deploy settings
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# The packages folder can be ignored because of Package Restore
**/packages/*
# except build/, which is used as an MSBuild target.
!**/packages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/packages/repositories.config
# NuGet v3's project.json files produces more ignoreable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
node_modules/
orleans.codegen.cs

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm

# SQL Server files
*.mdf
*.ldf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# JetBrains Rider
.idea/
*.sln.iml

# CodeRush
.cr/

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/

### Csharp ###
##
## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore

# User-specific files
*.rsuser

# User-specific files (MonoDevelop/Xamarin Studio)

# Mono auto generated files
mono_crash.*

# Build results
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
# Uncomment if you have tasks that create the project's static files in wwwroot

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results

# NUnit
nunit-*.xml

# Build Results of an ATL Project

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_h.h
*.iobj
*.ipdb
*_wpftmp.csproj
*.tlog

# Chutzpah Test files

# Visual C++ cache files

# Visual Studio profiler

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace

# Guidance Automation Toolkit

# ReSharper is a .NET coding add-in

# TeamCity is a build add-in

# DotCover is a Code Coverage Tool

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results

# NCrunch

# MightyMoose

# Web workbench (sass)

# Installshield output folder

# DocProject is a documentation generator add-in

# Click-Once directory

# Publish Web Output
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted

# NuGet Packages
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files

# Microsoft Azure Build Output

# Microsoft Azure Emulator

# Windows Store app package directories and files
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)

# RIA/Silverlight projects

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.ndf

# Business Intelligence projects
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes

# GhostDoc plugin setting file

# Node.js Tools for Visual Studio

# Visual Studio 6 build log

# Visual Studio 6 workspace options file

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio 6 auto-generated project file (contains which files were open etc.)
*.vbp

# Visual Studio 6 workspace and project file (working project files containing files to include in project)
*.dsw
*.dsp

# Visual Studio 6 technical files

# Visual Studio LightSwitch build output

# Paket dependency manager

# FAKE - F# Make

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# Visual Studio History (VSHistory) files
.vshistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd

# VS Code files for those working on multiple tools
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/extensions.json
*.code-workspace

# Local History for Visual Studio Code
.history/

# Windows Installer files from build outputs
*.cab
*.msi
*.msix
*.msm
*.msp

# JetBrains Rider

### DotnetCore ###
# .NET Core build folders
bin/
obj/

# Common node modules locations
/node_modules
/wwwroot/node_modules

### Node ###
# Logs
logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

### Node Patch ###
# Serverless Webpack directories
.webpack/

# Optional stylelint cache

# SvelteKit build / generate output
.svelte-kit

### react ###
.DS_*
**/*.backup.*
**/*.back.*

node_modules

*.sublime*

psd
thumb
sketch

### VisualStudioCode ###
!.vscode/*.code-snippets

# Local History for Visual Studio Code

# Built Visual Studio Code Extensions
*.vsix

### VisualStudioCode Patch ###
# Ignore all local history of files
.history
.ionide

### VisualStudio ###

# User-specific files

# User-specific files (MonoDevelop/Xamarin Studio)

# Mono auto generated files

# Build results

# Visual Studio 2015/2017 cache/options directory
# Uncomment if you have tasks that create the project's static files in wwwroot

# Visual Studio 2017 auto generated files

# MSTest test Results

# NUnit

# Build Results of an ATL Project

# Benchmark Results

# .NET Core

# ASP.NET Scaffolding

# StyleCop

# Files built by Visual Studio

# Chutzpah Test files

# Visual C++ cache files

# Visual Studio profiler

# Visual Studio Trace Files

# TFS 2012 Local Workspace

# Guidance Automation Toolkit

# ReSharper is a .NET coding add-in

# TeamCity is a build add-in

# DotCover is a Code Coverage Tool

# AxoCover is a Code Coverage Tool

# Coverlet is a free, cross platform Code Coverage Tool

# Visual Studio code coverage results

# NCrunch

# MightyMoose

# Web workbench (sass)

# Installshield output folder

# DocProject is a documentation generator add-in

# Click-Once directory

# Publish Web Output
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted

# NuGet Packages
# NuGet Symbol Packages
# The packages folder can be ignored because of Package Restore
# except build/, which is used as an MSBuild target.
# Uncomment if necessary however generally it will be regenerated when needed
# NuGet v3's project.json files produces more ignorable files

# Microsoft Azure Build Output

# Microsoft Azure Emulator

# Windows Store app package directories and files

# Visual Studio cache files
# files ending in .cache can be ignored
# but keep track of directories ending in .cache

# Others

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)

# RIA/Silverlight projects

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)

# SQL Server files

# Business Intelligence projects

# Microsoft Fakes

# GhostDoc plugin setting file

# Node.js Tools for Visual Studio

# Visual Studio 6 build log

# Visual Studio 6 workspace options file

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)

# Visual Studio 6 auto-generated project file (contains which files were open etc.)

# Visual Studio 6 workspace and project file (working project files containing files to include in project)

# Visual Studio 6 technical files

# Visual Studio LightSwitch build output

# Paket dependency manager

# FAKE - F# Make

# CodeRush personal settings

# Python Tools for Visual Studio (PTVS)

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio

# Telerik's JustMock configuration file

# BizTalk build output

# OpenCover UI analysis results

# Azure Stream Analytics local run output

# MSBuild Binary and Structured Log

# NVidia Nsight GPU debugger configuration file

# MFractors (Xamarin productivity tool) working folder

# Local History for Visual Studio

# Visual Studio History (VSHistory) files

# BeatPulse healthcheck temp database

# Backup folder for Package Reference Convert tool in Visual Studio 2017

# Ionide (cross platform F# VS Code tools) working folder

# Fody - auto-generated XML schema

# VS Code files for those working on multiple tools

# Local History for Visual Studio Code

# Windows Installer files from build outputs

# JetBrains Rider

### VisualStudio Patch ###
# Additional files built by Visual Studio

# End of https://www.toptal.com/developers/gitignore/api/react,csharp,dotnetcore,aspnetcore,visualstudio,visualstudiocode,node

================
File: collegefootballstats.client/.gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: collegefootballstats.client/collegefootballstats.client.esproj
================
<Project Sdk="Microsoft.VisualStudio.JavaScript.Sdk/0.5.128-alpha">
  <PropertyGroup>
    <StartupCommand>npm run dev</StartupCommand>
    <JavaScriptTestRoot>src\</JavaScriptTestRoot>
    <JavaScriptTestFramework>Jest</JavaScriptTestFramework>
    <!-- Allows the build (or compile) script located on package.json to run on Build -->
    <ShouldRunBuildScript>false</ShouldRunBuildScript>
    <!-- Folder where production build objects will be placed -->
    <PublishAssetsDirectory>$(MSBuildProjectDirectory)\dist</PublishAssetsDirectory>
  </PropertyGroup>
</Project>

================
File: collegefootballstats.client/eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: collegefootballstats.client/index.html
================
<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>College Football Stats</title>
</head>
<body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
</body>
</html>

================
File: collegefootballstats.client/nuget.config
================
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <clear />
    <add key="nuget.org" value="https://api.nuget.org/v3/index.json" />
  </packageSources>
  <disabledPackageSources>
    <clear />
  </disabledPackageSources>
</configuration>

================
File: collegefootballstats.client/package.json
================
{
  "name": "collegefootballstats.client",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@emotion/react": "^11.11.3",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.15.10",
    "@mui/material": "^5.15.10",
    "axios": "^1.7.7",
    "d3": "^7.9.0",
    "lucide-react": "^0.460.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.22.1",
    "recharts": "^2.13.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@vitejs/plugin-react": "^4.3.3",
    "eslint": "^9.15.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.13",
    "globals": "^15.11.0",
    "vite": "^5.4.9"
  }
}

================
File: collegefootballstats.client/public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: collegefootballstats.client/README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: collegefootballstats.client/src/App.css
================
#root {
    max-width: 1280px;
    margin: 0 auto;
    padding: 2rem;
    text-align: center;
    background: white;
    color: black;
}

tr:nth-child(even) {
    background: #F2F2F2;
}

tr:nth-child(odd) {
    background: #FFF;
}

th, td {
    padding-left: 1rem;
    padding-right: 1rem;
}

================
File: collegefootballstats.client/src/App.jsx
================
import { ThemeProvider, createTheme } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import Home from './pages/Home.jsx';
import GameChangers from './pages/GameChangers.jsx';
import StarPower from './pages/StarPower.jsx';
import ConferenceClash from './pages/ConferenceClash.jsx';
import SidelineShuffle from './pages/SidelineShuffle.jsx';
import DraftDayDividends from './pages/DraftDayDividends.jsx';
import Feedback from './pages/Feedback.jsx';

const theme = createTheme({
    palette: {
        primary: {
            main: '#212D40',
        },
        secondary: {
            main: '#3F4C64',
        }
    },
    components: {
        MuiCssBaseline: {
            styleOverrides: {
                body: {
                    backgroundColor: '#f5f5f5',
                    minHeight: '100vh'
                }
            }
        }
    }
});

function App() {
    return (
        <ThemeProvider theme={theme}>
            <CssBaseline />
            <BrowserRouter>
                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/player-impact" element={<GameChangers />} />
                    <Route path="/recruits-to-pros" element={<StarPower />} />
                    <Route path="/conference-evolution" element={<ConferenceClash />} />
                    <Route path="/coaching-impact" element={<SidelineShuffle />} />
                    <Route path="/draft-performance" element={<DraftDayDividends />} />
                    <Route path="/feedback" element={<Feedback />} />
                    <Route path="*" element={<Navigate to="/" replace />} />
                </Routes>
            </BrowserRouter>
        </ThemeProvider>
    );
}

export default App;

================
File: collegefootballstats.client/src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: collegefootballstats.client/src/components/AnalysisCard.jsx
================
import { Card, Typography, Box } from '@mui/material';
import { useNavigate } from 'react-router-dom';

export default function AnalysisCard({ title, description, path }) {
    const navigate = useNavigate();

    return (
        <Card
            onClick={() => navigate(path)}
            sx={{
                display: 'flex',
                flexDirection: 'row',
                height: '200px',
                cursor: 'pointer',
                backgroundColor: '#fff',
                transition: 'all 0.3s ease-in-out', // Smooth transition for all changes
                '&:hover': {
                    backgroundColor: '#262a42',
                    transform: 'translateY(-4px)', // Slight lift effect
                    boxShadow: '0 6px 12px rgba(82, 101, 156, 0.2)', // Custom shadow matching hover color
                    '& .card-text': {
                        color: '#fff'
                    },
                    '& .card-description': {
                        color: 'rgba(255, 255, 255, 0.8)'
                    }
                }
            }}
        >
            <Box sx={{
                width: '50%',
                display: 'flex',
                flexDirection: 'column',
                justifyContent: 'center',
                p: 3
            }}>
                <Typography
                    className="card-text"
                    variant="h2"
                    component="h2"
                    sx={{
                        fontSize: '1.5rem',
                        fontWeight: 600,
                        mb: 1,
                        color: '#212D40',
                        fontFamily: 'Georgia, serif',
                        transition: 'color 0.3s ease-in-out' // Smooth color transition
                    }}
                >
                    {title}
                </Typography>
                <Typography
                    className="card-description"
                    variant="body2"
                    sx={{
                        fontSize: '0.875rem',
                        color: '#666',
                        fontWeight: 400,
                        lineHeight: 1.5,
                        transition: 'color 0.3s ease-in-out' // Smooth color transition
                    }}
                >
                    {description}
                </Typography>
            </Box>
            <Box sx={{
                width: '50%',
                backgroundColor: '#f5f5f5',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center'
            }}>
                <Typography sx={{ color: '#666' }}>
                    Image Placeholder
                </Typography>
            </Box>
        </Card>
    );
}

================
File: collegefootballstats.client/src/components/CoachingImpactVisualization.jsx
================
import React, { useRef, useEffect } from 'react';
import * as d3 from 'd3';

const CoachingImpactVisualization = ({ data }) => {
    const svgRef = useRef();

    useEffect(() => {
        if (!data) return;

        const svg = d3.select(svgRef.current);
        svg.selectAll('*').remove(); // Clear previous content

        const width = 800;
        const height = 400;
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };

        const x = d3.scaleLinear()
            .domain(d3.extent(data, d => d.year))
            .range([margin.left, width - margin.right]);

        const y1 = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.winPercentage)]).nice()
            .range([height - margin.bottom, margin.top]);

        const y2 = d3.scaleLinear()
            .domain([d3.max(data, d => Math.max(d.apRank, d.coachesPollRank, d.playerCommitterRank)), 1]).nice()
            .range([height - margin.bottom, margin.top]);

        const xAxis = g => g
            .attr("transform", `translate(0,${height - margin.bottom})`)
            .call(d3.axisBottom(x).ticks(width / 80).tickSizeOuter(0));

        const y1Axis = g => g
            .attr("transform", `translate(${margin.left},0)`)
            .call(d3.axisLeft(y1))
            .call(g => g.select(".domain").remove())
            .call(g => g.append("text")
                .attr("x", -margin.left)
                .attr("y", 10)
                .attr("fill", "currentColor")
                .attr("text-anchor", "start")
                .text("Win Percentage (%)"));

        const y2Axis = g => g
            .attr("transform", `translate(${width - margin.right},0)`)
            .call(d3.axisRight(y2))
            .call(g => g.select(".domain").remove())
            .call(g => g.append("text")
                .attr("x", margin.right)
                .attr("y", 10)
                .attr("fill", "currentColor")
                .attr("text-anchor", "end")
                .text("Rank"));

        svg.append("g")
            .call(xAxis);

        svg.append("g")
            .call(y1Axis);

        svg.append("g")
            .call(y2Axis);

        const line1 = d3.line()
            .x(d => x(d.year))
            .y(d => y1(d.winPercentage));

        const line2 = d3.line()
            .x(d => x(d.year))
            .y(d => y2(d.apRank));

        const line3 = d3.line()
            .x(d => x(d.year))
            .y(d => y2(d.coachesPollRank));

        const line4 = d3.line()
            .x(d => x(d.year))
            .y(d => y2(d.playerCommitterRank));

        svg.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-width", 1.5)
            .attr("d", line1);

        svg.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "red")
            .attr("stroke-width", 1.5)
            .attr("d", line2);

        svg.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "green")
            .attr("stroke-width", 1.5)
            .attr("d", line3);

        svg.append("path")
            .datum(data)
            .attr("fill", "none")
            .attr("stroke", "orange")
            .attr("stroke-width", 1.5)
            .attr("d", line4);

        // Add legend
        const legend = svg.append("g")
            .attr("transform", `translate(${width - margin.right - 150},${margin.top})`);

        legend.append("rect")
            .attr("width", 150)
            .attr("height", 80)
            .attr("fill", "white")
            .attr("stroke", "black");

        legend.append("line")
            .attr("x1", 10)
            .attr("y1", 10)
            .attr("x2", 30)
            .attr("y2", 10)
            .attr("stroke", "steelblue")
            .attr("stroke-width", 2);

        legend.append("text")
            .attr("x", 40)
            .attr("y", 10)
            .attr("dy", "0.35em")
            .text("Win %");

        legend.append("line")
            .attr("x1", 10)
            .attr("y1", 30)
            .attr("x2", 30)
            .attr("y2", 30)
            .attr("stroke", "red")
            .attr("stroke-width", 2);

        legend.append("text")
            .attr("x", 40)
            .attr("y", 30)
            .attr("dy", "0.35em")
            .text("AP Rank");

        legend.append("line")
            .attr("x1", 10)
            .attr("y1", 50)
            .attr("x2", 30)
            .attr("y2", 50)
            .attr("stroke", "green")
            .attr("stroke-width", 2);

        legend.append("text")
            .attr("x", 40)
            .attr("y", 50)
            .attr("dy", "0.35em")
            .text("Coaches Poll Rank");

        legend.append("line")
            .attr("x1", 10)
            .attr("y1", 70)
            .attr("x2", 30)
            .attr("y2", 70)
            .attr("stroke", "orange")
            .attr("stroke-width", 2);

        legend.append("text")
            .attr("x", 40)
            .attr("y", 70)
            .attr("dy", "0.35em")
            .text("Playoff Committee Rank");

    }, [data]);

    return <svg ref={svgRef} width={800} height={400}></svg>;
};

export default CoachingImpactVisualization;

================
File: collegefootballstats.client/src/components/Header.jsx
================
import { AppBar, Toolbar, Typography, IconButton, Menu, MenuItem, Container } from '@mui/material';
import { Menu as MenuIcon } from '@mui/icons-material';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

export default function Header() {
    const [anchorEl, setAnchorEl] = useState(null);
    const navigate = useNavigate();

    const menuItems = [
        { title: 'Game Changers', path: '/player-impact' },
        { title: 'Star Power', path: '/recruits-to-pros' },
        { title: 'Conference Clash', path: '/conference-evolution' },
        { title: 'Sideline Shuffle', path: '/coaching-impact' },
        { title: 'Draft Day Dividends', path: '/draft-performance' },
        { title: 'Feedback', path: '/feedback' }
    ];

    const handleMenuOpen = (event) => {
        setAnchorEl(event.currentTarget);
    };

    const handleMenuClose = () => {
        setAnchorEl(null);
    };

    const handleMenuClick = (path) => {
        navigate(path);
        handleMenuClose();
    };

    return (
        <AppBar
            position="static"
            sx={{
                backgroundColor: '#de720d',
                boxShadow: 2
            }}
        >
            <Container maxWidth="lg">
                <Toolbar sx={{ padding: '0 !important' }}>
                    <Typography
                        variant="h6"
                        component="div"
                        sx={{
                            flexGrow: 1,
                            cursor: 'pointer',
                            color: '#fff'
                        }}
                        onClick={() => navigate('/')}
                    >
                        College Football Stat Hub
                    </Typography>
                    <IconButton
                        size="large"
                        edge="end"
                        sx={{ color: '#fff' }}
                        aria-label="menu"
                        onClick={handleMenuOpen}
                    >
                        <MenuIcon />
                    </IconButton>
                    <Menu
                        anchorEl={anchorEl}
                        open={Boolean(anchorEl)}
                        onClose={handleMenuClose}
                        sx={{
                            '& .MuiPaper-root': {
                                backgroundColor: '#212D40',
                                minWidth: '200px'
                            }
                        }}
                    >
                        {menuItems.map((item) => (
                            <MenuItem
                                key={item.path}
                                onClick={() => handleMenuClick(item.path)}
                                sx={{
                                    color: '#fff',
                                    '&:hover': {
                                        backgroundColor: '#3F4C64'
                                    }
                                }}
                            >
                                {item.title}
                            </MenuItem>
                        ))}
                    </Menu>
                </Toolbar>
            </Container>
        </AppBar>
    );
}

================
File: collegefootballstats.client/src/index.css
================
:root {
    font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
    font-synthesis: none;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body {
    margin: 0;
    min-width: 320px;
    min-height: 100vh;
    background-color: #f5f5f5;
}

#root {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

================
File: collegefootballstats.client/src/main.jsx
================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App'

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

================
File: collegefootballstats.client/src/pages/ConferenceClash.jsx
================
import { Box, Container, Typography, Slider, Select, MenuItem, Button, Paper, RadioGroup, FormControlLabel, Radio, FormControl } from '@mui/material';
import Header from '../components/Header';
import { useState, useEffect } from 'react';

function ConferenceClash() {
    const [seasonRange, setSeasonRange] = useState([2004, 2024]);
    const [selectedConference, setSelectedConference] = useState('');
    const [conferences, setConferences] = useState([]);
    const [visualizationData, setVisualizationData] = useState(null);
    const [analysisType, setAnalysisType] = useState('offensive'); // 'offensive' or 'defensive'

    useEffect(() => {
        const fetchConferences = async () => {
            try {
                const response = await fetch("/api/conferences"); // Backend endpoint
                const data = await response.json();
                setConferences(data);
            } catch (error) {
                console.error("Error fetching conferences:", error);
            }
        };
        fetchConferences();
    }, []);

    const handleSeasonChange = (event, newValue) => {
        setSeasonRange(newValue);
    };

    const handleConferenceChange = (event) => {
        setSelectedConference(event.target.value);
    };

    const handleAnalysisTypeChange = (event) => {
        setAnalysisType(event.target.value);
    };

    const handleReset = () => {
        setSeasonRange([2004, 2024]);
        setSelectedConference('');
        setVisualizationData(null);
        setAnalysisType('offensive');
    };

    const generateVisualization = () => {
        console.log('Generating visualization with:', {
            seasonRange,
            analysisType,
            conference: selectedConference
        });
    };

    return (
        <Box sx={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Header />

            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Box sx={{ textAlign: 'center', mb: 4 }}>
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2.5rem',
                            fontWeight: 700,
                            mb: 2
                        }}
                    >
                        Conference Clash:
                    </Typography>
                    <Typography
                        variant="h4"
                        component="h2"
                        sx={{
                            color: '#3F4C64',
                            fontFamily: 'Georgia, serif',
                            fontSize: '1.75rem',
                            fontWeight: 600,
                            mb: 2
                        }}
                    >
                        Offensive Evolution
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        sx={{
                            color: '#3F4C64',
                            maxWidth: '600px',
                            margin: '0 auto',
                            fontSize: '1.1rem',
                            lineHeight: 1.5,
                            opacity: 0.9
                        }}
                    >
                        Examining the evolution of offensive and defensive metrics within conferences
                    </Typography>
                </Box>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        mb: 4,
                        backgroundColor: 'white'
                    }}
                >
                    <Typography
                        variant="h6"
                        component="h3"
                        sx={{
                            mb: 2,
                            color: '#212D40'
                        }}
                    >
                        Select the range of seasons to visualize
                    </Typography>

                    <Box sx={{ mb: 4 }}>
                        <Box
                            sx={{
                                px: 2,
                                position: 'relative',
                                mb: 1
                            }}
                        >
                            <Slider
                                value={seasonRange}
                                onChange={handleSeasonChange}
                                valueLabelDisplay="auto"
                                min={2004}
                                max={2024}
                                valueLabelFormat={(value) => `${value}`}
                                sx={{
                                    color: '#3F4C64',
                                    '& .MuiSlider-thumb': {
                                        '&:hover, &.Mui-focusVisible': {
                                            boxShadow: '0 0 0 8px rgba(63, 76, 100, 0.16)'
                                        }
                                    },
                                    '& .MuiSlider-rail': {
                                        backgroundColor: '#e0e0e0'
                                    },
                                    '& .MuiSlider-valueLabel': {
                                        backgroundColor: '#212D40'
                                    }
                                }}
                            />
                        </Box>

                        <Box
                            sx={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                px: 2,
                                width: '100%'
                            }}
                        >
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    left: '2px'
                                }}
                            >
                                '04
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    right: '2px'
                                }}
                            >
                                '24
                            </Typography>
                        </Box>
                    </Box>

                    <FormControl component="fieldset" sx={{ mb: 3 }}>
                        <RadioGroup
                            row
                            name="analysis-type"
                            value={analysisType}
                            onChange={handleAnalysisTypeChange}
                        >
                            <FormControlLabel
                                value="offensive"
                                control={
                                    <Radio
                                        sx={{
                                            '&.Mui-checked': {
                                                color: '#3F4C64',
                                            }
                                        }}
                                    />
                                }
                                label="Offensive"
                            />
                            <FormControlLabel
                                value="defensive"
                                control={
                                    <Radio
                                        sx={{
                                            '&.Mui-checked': {
                                                color: '#3F4C64',
                                            }
                                        }}
                                    />
                                }
                                label="Defensive"
                            />
                        </RadioGroup>
                    </FormControl>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Conference Selection
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedConference}
                            onChange={handleConferenceChange}
                            displayEmpty
                            sx={{ backgroundColor: 'white' }}
                        >
                            <MenuItem value="">
                                <em>Select a conference...</em>
                            </MenuItem>
                            {conferences.length > 0 ? (
                                conferences.map((conference) => (
                                    <MenuItem key={conference.conferenceId} value={conference.conferenceId}>
                                        {conference.name}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading conferences...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                        <Button
                            variant="contained"
                            onClick={generateVisualization}
                            sx={{
                                backgroundColor: '#212D40',
                                '&:hover': {
                                    backgroundColor: '#3F4C64'
                                }
                            }}
                        >
                            Generate Visualization
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={handleReset}
                            sx={{
                                color: '#212D40',
                                borderColor: '#212D40',
                                '&:hover': {
                                    borderColor: '#3F4C64',
                                    color: '#3F4C64'
                                }
                            }}
                        >
                            Reset
                        </Button>
                    </Box>
                </Paper>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        height: '400px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'white'
                    }}
                >
                    {!visualizationData ? (
                        <Typography color="text.secondary">
                            Select a conference and generate visualization
                        </Typography>
                    ) : (
                        <Box>Visualization will go here</Box>
                    )}
                </Paper>
            </Container>
        </Box>
    );
}

export default ConferenceClash;

================
File: collegefootballstats.client/src/pages/DraftDayDividends.jsx
================
import { Box, Container, Typography, Slider, Select, MenuItem, Button, Paper } from '@mui/material';
import Header from '../components/Header';
import { useState, useEffect } from 'react';

function DraftDayDividends() {
    const [seasonRange, setSeasonRange] = useState([2004, 2024]);
    const [selectedPosition, setSelectedPosition] = useState('');
    const [positions, setPositions] = useState([]);
    const [visualizationData, setVisualizationData] = useState(null);

    useEffect(() => {
        fetchPositions();
    }, []);

    const fetchPositions = async () => {
        try {
            const response = await fetch('/api/player-positions');
            const data = await response.json();
            console.log('Positions fetched:', data);
            if (Array.isArray(data)) {
                setPositions(data);
            } else {
                console.warn('Unexpected positions response format', data);
                setPositions([]);
            }
        } catch (error) {
            console.error('Error fetching positions:', error);
            setPositions([]);
        }
    };

    const handleSeasonChange = (event, newValue) => {
        setSeasonRange(newValue);
    };

    const handlePositionChange = (event) => {
        setSelectedPosition(event.target.value);
    };

    const handleReset = () => {
        setSeasonRange([2004, 2024]);
        setSelectedPosition('');
        setVisualizationData(null);
    };

    const generateVisualization = () => {
        console.log('Generating visualization with:', {
            seasonRange,
            position: selectedPosition
        });
    };

    return (
        <Box sx={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Header />

            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Box sx={{ textAlign: 'center', mb: 4 }}>
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2.5rem',
                            fontWeight: 700,
                            mb: 2
                        }}
                    >
                        Draft Day Dividends:
                    </Typography>
                    <Typography
                        variant="h4"
                        component="h2"
                        sx={{
                            color: '#3F4C64',
                            fontFamily: 'Georgia, serif',
                            fontSize: '1.75rem',
                            fontWeight: 600,
                            mb: 2
                        }}
                    >
                        Position Performance
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        sx={{
                            color: '#3F4C64',
                            maxWidth: '600px',
                            margin: '0 auto',
                            fontSize: '1.1rem',
                            lineHeight: 1.5,
                            opacity: 0.9
                        }}
                    >
                        Analyzing how player performance metrics by position influence NFL draft rounds
                    </Typography>
                </Box>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        mb: 4,
                        backgroundColor: 'white'
                    }}
                >
                    <Typography
                        variant="h6"
                        component="h3"
                        sx={{
                            mb: 2,
                            color: '#212D40'
                        }}
                    >
                        Select the range of seasons to visualize
                    </Typography>

                    <Box sx={{ mb: 4 }}>
                        <Box
                            sx={{
                                px: 2,
                                position: 'relative',
                                mb: 1
                            }}
                        >
                            <Slider
                                value={seasonRange}
                                onChange={handleSeasonChange}
                                valueLabelDisplay="auto"
                                min={2004}
                                max={2024}
                                valueLabelFormat={(value) => `${value}`}
                                sx={{
                                    color: '#3F4C64',
                                    '& .MuiSlider-thumb': {
                                        '&:hover, &.Mui-focusVisible': {
                                            boxShadow: '0 0 0 8px rgba(63, 76, 100, 0.16)'
                                        }
                                    },
                                    '& .MuiSlider-rail': {
                                        backgroundColor: '#e0e0e0'
                                    },
                                    '& .MuiSlider-valueLabel': {
                                        backgroundColor: '#212D40'
                                    }
                                }}
                            />
                        </Box>

                        <Box
                            sx={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                px: 2,
                                width: '100%'
                            }}
                        >
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    left: '2px'
                                }}
                            >
                                04'
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    right: '2px'
                                }}
                            >
                                24'
                            </Typography>
                        </Box>
                    </Box>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Player Position
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedPosition}
                            onChange={handlePositionChange}
                            displayEmpty
                            sx={{ backgroundColor: 'white' }}
                        >
                            <MenuItem value="">
                                <em>Select a position...</em>
                            </MenuItem>
                            {positions.length > 0 ? (
                                positions.map((position) => (
                                    <MenuItem key={position.position} value={position.position}>
                                        {position.position}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading positions...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                        <Button
                            variant="contained"
                            onClick={generateVisualization}
                            sx={{
                                backgroundColor: '#212D40',
                                '&:hover': {
                                    backgroundColor: '#3F4C64'
                                }
                            }}
                        >
                            Generate Visualization
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={handleReset}
                            sx={{
                                color: '#212D40',
                                borderColor: '#212D40',
                                '&:hover': {
                                    borderColor: '#3F4C64',
                                    color: '#3F4C64'
                                }
                            }}
                        >
                            Reset
                        </Button>
                    </Box>
                </Paper>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        height: '400px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'white'
                    }}
                >
                    {!visualizationData ? (
                        <Typography color="text.secondary">
                            Select a position and generate visualization
                        </Typography>
                    ) : (
                        <Box>Visualization will go here</Box>
                    )}
                </Paper>
            </Container>
        </Box>
    );
}

export default DraftDayDividends;

================
File: collegefootballstats.client/src/pages/Feedback.jsx
================
import { Box, Container, Typography, Paper, TextField, FormGroup, FormControlLabel, Checkbox, Button, Snackbar, Alert } from '@mui/material';
import Header from '../components/Header';
import { useState } from 'react';

function Feedback() {
    const [formData, setFormData] = useState({
        name: '',
        email: '',
        feedback: '',
        visualizations: {
            starPower: false,
            gameChangers: false,
            conferenceClash: false,
            sidelineShuffle: false,
            draftDay: false
        }
    });

    // Add state for notifications
    const [successOpen, setSuccessOpen] = useState(false);
    const [errorOpen, setErrorOpen] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const handleCheckboxChange = (e) => {
        const { name, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            visualizations: {
                ...prev.visualizations,
                [name]: checked
            }
        }));
    };

    // Add validation function
    const validateForm = () => {
        if (!formData.name.trim()) {
            setErrorMessage('Please enter your name');
            setErrorOpen(true);
            return false;
        }
        if (!formData.email.trim()) {
            setErrorMessage('Please enter your email');
            setErrorOpen(true);
            return false;
        }
        if (!formData.feedback.trim()) {
            setErrorMessage('Please enter your feedback');
            setErrorOpen(true);
            return false;
        }
        return true;
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (validateForm()) {
            console.log('Form submitted:', formData);
            setSuccessOpen(true);
            handleClear();
        }
    };

    const handleClear = () => {
        setFormData({
            name: '',
            email: '',
            feedback: '',
            visualizations: {
                starPower: false,
                gameChangers: false,
                conferenceClash: false,
                sidelineShuffle: false,
                draftDay: false
            }
        });
    };

    // Add notification close handlers
    const handleCloseSuccess = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setSuccessOpen(false);
    };

    const handleCloseError = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setErrorOpen(false);
    };

    return (
        <Box sx={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Header />

            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        backgroundColor: 'white'
                    }}
                >
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2rem',
                            fontWeight: 700,
                            mb: 1
                        }}
                    >
                        User Feedback
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        sx={{
                            color: '#3F4C64',
                            mb: 4
                        }}
                    >
                        Complete the form below to supply the team with feedback
                    </Typography>

                    <Box component="form" onSubmit={handleSubmit} sx={{ width: '100%' }}>
                        <Box sx={{
                            display: 'grid',
                            gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' },
                            gap: 3,
                            mb: 4
                        }}>
                            <TextField
                                fullWidth
                                label="Name"
                                name="name"
                                value={formData.name}
                                onChange={handleInputChange}
                                variant="outlined"
                                sx={{
                                    '& .MuiOutlinedInput-root': {
                                        '&.Mui-focused fieldset': {
                                            borderColor: '#3F4C64',
                                        },
                                    },
                                    '& .MuiInputLabel-root.Mui-focused': {
                                        color: '#3F4C64',
                                    }
                                }}
                            />
                            <TextField
                                fullWidth
                                label="Email Address"
                                name="email"
                                type="email"
                                value={formData.email}
                                onChange={handleInputChange}
                                variant="outlined"
                                sx={{
                                    '& .MuiOutlinedInput-root': {
                                        '&.Mui-focused fieldset': {
                                            borderColor: '#3F4C64',
                                        },
                                    },
                                    '& .MuiInputLabel-root.Mui-focused': {
                                        color: '#3F4C64',
                                    }
                                }}
                            />
                        </Box>

                        <Typography
                            sx={{
                                color: '#212D40',
                                mb: 2,
                                fontWeight: 500
                            }}
                        >
                            Select which visualizations you are leaving feedback for
                        </Typography>

                        <FormGroup sx={{ mb: 4 }}>
                            <Box sx={{
                                display: 'grid',
                                gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr' },
                                gap: 1
                            }}>
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={formData.visualizations.starPower}
                                            onChange={handleCheckboxChange}
                                            name="starPower"
                                            sx={{
                                                '&.Mui-checked': {
                                                    color: '#3F4C64',
                                                },
                                            }}
                                        />
                                    }
                                    label="Star Power: Recruits to Pros"
                                />
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={formData.visualizations.sidelineShuffle}
                                            onChange={handleCheckboxChange}
                                            name="sidelineShuffle"
                                            sx={{
                                                '&.Mui-checked': {
                                                    color: '#3F4C64',
                                                },
                                            }}
                                        />
                                    }
                                    label="Sideline Shuffle: Coaching Impact"
                                />
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={formData.visualizations.gameChangers}
                                            onChange={handleCheckboxChange}
                                            name="gameChangers"
                                            sx={{
                                                '&.Mui-checked': {
                                                    color: '#3F4C64',
                                                },
                                            }}
                                        />
                                    }
                                    label="Game Changers: Player Impact Analysis"
                                />
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={formData.visualizations.draftDay}
                                            onChange={handleCheckboxChange}
                                            name="draftDay"
                                            sx={{
                                                '&.Mui-checked': {
                                                    color: '#3F4C64',
                                                },
                                            }}
                                        />
                                    }
                                    label="Draft Day Dividends: Position Performance"
                                />
                                <FormControlLabel
                                    control={
                                        <Checkbox
                                            checked={formData.visualizations.conferenceClash}
                                            onChange={handleCheckboxChange}
                                            name="conferenceClash"
                                            sx={{
                                                '&.Mui-checked': {
                                                    color: '#3F4C64',
                                                },
                                            }}
                                        />
                                    }
                                    label="Conference Clash: Offensive Evolution"
                                />
                            </Box>
                        </FormGroup>

                        <TextField
                            fullWidth
                            multiline
                            rows={4}
                            label="Write your feedback details here..."
                            name="feedback"
                            value={formData.feedback}
                            onChange={handleInputChange}
                            variant="outlined"
                            sx={{
                                mb: 4,
                                '& .MuiOutlinedInput-root': {
                                    '&.Mui-focused fieldset': {
                                        borderColor: '#3F4C64',
                                    },
                                },
                                '& .MuiInputLabel-root.Mui-focused': {
                                    color: '#3F4C64',
                                }
                            }}
                        />

                        <Box sx={{ display: 'flex', gap: 2 }}>
                            <Button
                                type="submit"
                                variant="contained"
                                sx={{
                                    backgroundColor: '#212D40',
                                    '&:hover': {
                                        backgroundColor: '#3F4C64'
                                    }
                                }}
                            >
                                Submit
                            </Button>
                            <Button
                                type="button"
                                variant="outlined"
                                onClick={handleClear}
                                sx={{
                                    color: '#212D40',
                                    borderColor: '#212D40',
                                    '&:hover': {
                                        borderColor: '#3F4C64',
                                        color: '#3F4C64'
                                    }
                                }}
                            >
                                Clear
                            </Button>
                        </Box>
                    </Box>
                </Paper>
            </Container>

            {/* Success Notification */}
            <Snackbar
                open={successOpen}
                autoHideDuration={3000}
                onClose={handleCloseSuccess}
                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
            >
                <Alert
                    onClose={handleCloseSuccess}
                    severity="success"
                    variant="filled"
                    sx={{
                        width: '100%',
                        backgroundColor: '#3F4C64'
                    }}
                >
                    Your feedback has been received!
                </Alert>
            </Snackbar>

            {/* Error Notification */}
            <Snackbar
                open={errorOpen}
                autoHideDuration={3000}
                onClose={handleCloseError}
                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
            >
                <Alert
                    onClose={handleCloseError}
                    severity="error"
                    variant="filled"
                    sx={{
                        width: '100%',
                        backgroundColor: '#212D40'
                    }}
                >
                    {errorMessage}
                </Alert>
            </Snackbar>
        </Box>
    );
}

export default Feedback;

================
File: collegefootballstats.client/src/pages/GameChangers.jsx
================
import { Box, Container, Typography, Slider, Select, MenuItem, Button, Paper } from '@mui/material';
import Header from '../components/Header';
import { useState, useEffect } from 'react';

function GameChangers() {
    const [seasonRange, setSeasonRange] = useState([2004, 2024]);
    const [selectedPlayer, setSelectedPlayer] = useState('');
    const [selectedTeam, setSelectedTeam] = useState('');
    const [players, setPlayers] = useState([]);
    const [teams, setTeams] = useState([]);
    const [visualizationData, setVisualizationData] = useState(null);

    useEffect(() => {
        fetchPlayers();
        fetchTeams();
    }, []);

    const fetchPlayers = async () => {
        try {
            const response = await fetch('/api/players');
            const data = await response.json();
            console.log('Players fetched:', data);
            if (Array.isArray(data)) {
                setPlayers(data);
            } else {
                console.warn('Unexpected players response format', data);
                setPlayers([]);
            }
        } catch (error) {
            console.error('Error fetching players:', error);
            setPlayers([]);
        }
    };

    const fetchTeams = async () => {
        try {
            const response = await fetch('/api/teams');
            const data = await response.json();
            console.log('Teams fetched:', data);
            if (Array.isArray(data)) {
                setTeams(data);
            } else {
                console.warn('Unexpected teams response format', data);
                setTeams([]);
            }
        } catch (error) {
            console.error('Error fetching teams:', error);
            setTeams([]);
        }
    };

    const handleSeasonChange = (event, newValue) => {
        setSeasonRange(newValue);
    };

    const handlePlayerChange = (event) => {
        setSelectedPlayer(event.target.value);
    };

    const handleTeamChange = (event) => {
        setSelectedTeam(event.target.value);
    };

    const handleReset = () => {
        setSeasonRange([2004, 2024]);
        setSelectedPlayer('');
        setSelectedTeam('');
        setVisualizationData(null);
    };

    const generateVisualization = () => {
        // TODO: Add visualization generation logic
        console.log('Generating visualization with:', {
            seasonRange,
            selectedPlayer,
            selectedTeam
        });
    };

    return (
        <Box sx={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Header />

            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Box sx={{ textAlign: 'center', mb: 4 }}>
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2.5rem',
                            fontWeight: 700,
                            mb: 2
                        }}
                    >
                        Game Changers
                    </Typography>
                    <Typography
                        variant="h4"
                        component="h2"
                        sx={{
                            color: '#3F4C64',
                            fontFamily: 'Georgia, serif',
                            fontSize: '1.75rem',
                            fontWeight: 600,
                            mb: 2
                        }}
                    >
                        Player Impact Analysis
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        sx={{
                            color: '#3F4C64',
                            maxWidth: '600px',
                            margin: '0 auto',
                            fontSize: '1.1rem',
                            lineHeight: 1.5,
                            opacity: 0.9
                        }}
                    >
                        Visualizing individual player performance influencing their team success
                    </Typography>
                </Box>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        mb: 4,
                        backgroundColor: 'white'
                    }}
                >
                    <Typography
                        variant="h6"
                        component="h3"
                        sx={{
                            mb: 2,
                            color: '#212D40'
                        }}
                    >
                        Select the range of seasons to visualize
                    </Typography>

                    <Box sx={{ mb: 4 }}>
                        <Box
                            sx={{
                                px: 2,
                                position: 'relative',
                                mb: 1
                            }}
                        >
                            <Slider
                                value={seasonRange}
                                onChange={handleSeasonChange}
                                valueLabelDisplay="auto"
                                min={2004}
                                max={2024}
                                valueLabelFormat={(value) => `${value}`}
                                sx={{
                                    color: '#3F4C64',
                                    '& .MuiSlider-thumb': {
                                        '&:hover, &.Mui-focusVisible': {
                                            boxShadow: '0 0 0 8px rgba(63, 76, 100, 0.16)'
                                        }
                                    },
                                    '& .MuiSlider-rail': {
                                        backgroundColor: '#e0e0e0'
                                    },
                                    '& .MuiSlider-valueLabel': {
                                        backgroundColor: '#212D40'
                                    }
                                }}
                            />
                        </Box>

                        <Box
                            sx={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                px: 2,
                                width: '100%'
                            }}
                        >
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    left: '2px'
                                }}
                            >
                                04'
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    right: '2px'
                                }}
                            >
                                24'
                            </Typography>
                        </Box>
                    </Box>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Select Player
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedPlayer}
                            onChange={handlePlayerChange}
                            displayEmpty
                            sx={{ backgroundColor: 'white' }}
                        >
                            <MenuItem value="">
                                <em>Select a player...</em>
                            </MenuItem>
                            {players.length > 0 ? (
                                players.map((player) => (
                                    <MenuItem key={player.playerId} value={player.playerId}>
                                        {player.name}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading players...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Select Team
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedTeam}
                            onChange={handleTeamChange}
                            displayEmpty
                            sx={{ backgroundColor: 'white' }}
                        >
                            <MenuItem value="">
                                <em>Select a team...</em>
                            </MenuItem>
                            {teams.length > 0 ? (
                                teams.map((team) => (
                                    <MenuItem key={team.teamId} value={team.teamId}>
                                        {team.school}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading teams...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                        <Button
                            variant="contained"
                            onClick={generateVisualization}
                            sx={{
                                backgroundColor: '#212D40',
                                '&:hover': {
                                    backgroundColor: '#3F4C64'
                                }
                            }}
                        >
                            Generate Visualization
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={handleReset}
                            sx={{
                                color: '#212D40',
                                borderColor: '#212D40',
                                '&:hover': {
                                    borderColor: '#3F4C64',
                                    color: '#3F4C64'
                                }
                            }}
                        >
                            Reset
                        </Button>
                    </Box>
                </Paper>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        height: '400px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'white'
                    }}
                >
                    {!visualizationData ? (
                        <Typography color="text.secondary">
                            Select a player and team, then generate visualization
                        </Typography>
                    ) : (
                        <Box>Visualization will go here</Box>
                    )}
                </Paper>
            </Container>
        </Box>
    );
}

export default GameChangers;

================
File: collegefootballstats.client/src/pages/Home.jsx
================
import { Box, Container, Typography, Button, Card } from '@mui/material';
import { useState } from 'react';
import AnalysisCard from '../components/AnalysisCard.jsx';
import Header from '../components/Header.jsx';
import axios from 'axios';

const analysisCards = [
    {
        title: "Game Changers: Player Impact",
        description: "For the query about individual player performance influencing team success",
        path: "/player-impact"
    },
    {
        title: "Star Power: Recruits to Pros",
        description: "For the query about recruiting class ratings and NFL draft outcomes",
        path: "/recruits-to-pros"
    },
    {
        title: "Conference Clash: Offensive Evolution",
        description: "For the query about how offensive and defensive metrics have evolved within conferences",
        path: "/conference-evolution"
    },
    {
        title: "Sideline Shuffle: Coaching Impact",
        description: "For the query about how coaching changes affect team performance",
        path: "/coaching-impact"
    },
    {
        title: "Draft Day Dividends: Position Performance",
        description: "For the query about player performance metrics and their affect on NFL draft rounds",
        path: "/draft-performance"
    }
];

function Home() {
    const [tupleCount, setTupleCount] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const fetchTupleCount = async () => {
        setLoading(true);
        setError(null);
        try {
            const response = await axios.get('/api/tuples');
            if (response && response.data) {
                setTupleCount(response.data.totalTuples);
            } else {
                throw new Error("Invalid response data");
            }
        } catch (err) {
            console.error("Error fetching tuple count:", err);
            setError("Failed to fetch tuple count. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <Box sx={{
            minHeight: '100vh',
            backgroundColor: '#f5f5f5',
            display: 'flex',
            flexDirection: 'column'
        }}>
            <Header />

            <Container
                maxWidth="lg"
                sx={{
                    mt: 4,
                    mb: 4,
                    flex: 1,
                    display: 'flex',
                    flexDirection: 'column'
                }}
            >
                <Box sx={{ textAlign: 'center', mb: 6 }}>
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2.5rem',
                            fontWeight: 700,
                            mb: 2
                        }}
                    >
                        College Football Stat Hub
                    </Typography>
                    <Typography
                        variant="h4"
                        component="h2"
                        sx={{
                            color: '#3F4C64',
                            fontFamily: 'Georgia, serif',
                            fontSize: '1.75rem',
                            fontWeight: 600,
                            mb: 2
                        }}
                    >
                        Your GO-TO hub for College Football Stat analysis and visualization
                    </Typography>
                </Box>

                <Box sx={{
                    display: 'flex',
                    flexDirection: 'column',
                    gap: 4
                }}>
                    {analysisCards.map((card, index) => (
                        <AnalysisCard
                            key={index}
                            title={card.title}
                            description={card.description}
                            path={card.path}
                        />
                    ))}

                    <Card sx={{
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                        p: 3,
                        gap: 2,
                        backgroundColor: '#fff'
                    }}>
                        <Typography
                            variant="h6"
                            sx={{
                                fontFamily: 'Georgia, serif',
                                color: '#212D40',
                                fontWeight: 600
                            }}
                        >
                            Shows all of the tuples found within the our database
                        </Typography>
                        <Box sx={{ display: 'flex', gap: 2 }}>
                            <Button
                                onClick={fetchTupleCount}
                                variant="contained"
                                sx={{
                                    backgroundColor: '#3F4C64',
                                    '&:hover': {
                                        backgroundColor: '#212D40'
                                    }
                                }}
                            >
                                Show Total Tuples
                            </Button>
                        </Box>

                        {loading && <Typography>Loading...</Typography>}
                        {error && <Typography color="error">{error}</Typography>}

                        {tupleCount !== null && !loading && (
                            <Typography>
                                Total Tuples: {tupleCount}
                            </Typography>
                        )}
                    </Card>
                </Box>
            </Container>
        </Box>
    );
}

export default Home;

================
File: collegefootballstats.client/src/pages/SidelineShuffle.jsx
================
import { Box, Container, Typography, Slider, Select, MenuItem, Button, Paper } from '@mui/material';
import Header from '../components/Header';
import { useState, useEffect } from 'react';
import CoachingImpactVisualization from '../components/CoachingImpactVisualization';


function SidelineShuffle() {
    const [seasonRange, setSeasonRange] = useState([2004, 2024]);
    const [selectedTeam, setSelectedTeam] = useState('');
    const [selectedCoach, setSelectedCoach] = useState('');
    const [teams, setTeams] = useState([]);
    const [coaches, setCoaches] = useState([]);
    const [visualizationData, setVisualizationData] = useState(null);

    useEffect(() => {
        fetchTeams();
    }, []);

    useEffect(() => {
        fetchCoaches();
    }, [selectedTeam]);

    const fetchTeams = async () => {
        try {
            const response = await fetch('/api/teams');
            const data = await response.json();
            console.log('Teams fetched:', data);
            if (Array.isArray(data)) {
                setTeams(data);
            } else {
                console.warn('Unexpected teams response format', data);
                setTeams([]);
            }
        } catch (error) {
            console.error('Error fetching teams:', error);
            setTeams([]);
        }
    };

    const fetchCoaches = async () => {
        try {
            const response = await fetch(`/api/coaches/${selectedTeam}`);
            const data = await response.json();
            console.log('Coaches fetched:', data);
            if (Array.isArray(data)) {
                setCoaches(data);
            } else {
                console.warn('Unexpected coaches response format', data);
                setCoaches([]);
            }
        } catch (error) {
            console.error('Error fetching coaches:', error);
            setCoaches([]);
        }
    };

    const handleSeasonChange = (event, newValue) => {
        setSeasonRange(newValue);
    };

    const handleTeamChange = (event) => {
        console.log(teams);
        console.log(selectedTeam);
        setSelectedTeam(event.target.value);
        console.log(selectedTeam);
    };

    const handleCoachChange = (event) => {
        console.log(coaches);
        console.log(selectedCoach);
        setSelectedCoach(event.target.value);
        console.log(selectedCoach);
    };

    const handleReset = () => {
        setSeasonRange([2004, 2024]);
        setSelectedTeam('');
        setSelectedCoach('');
        setVisualizationData(null);
    };

    const generateVisualization = async () => {
        console.log('Generating visualization with:', {
            seasonRange,
            team: selectedTeam,
            coach: selectedCoach
        });

        try {
            console.log(seasonRange);
            const response = await fetch(`/api/coaching-impact?teamId=${selectedTeam}&coachId=${selectedCoach}&startYear=${seasonRange[0]}&endYear=${seasonRange[1]}`);
            console.log(response);
            const data = await response.json();
            console.log('data fetched:', data);
            setVisualizationData(data);
        } catch (error) {
            console.error('Error fetching visualization data:', error);
        }

    };

    return (
        <Box sx={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Header />

            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Box sx={{ textAlign: 'center', mb: 4 }}>
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2.5rem',
                            fontWeight: 700,
                            mb: 2
                        }}
                    >
                        Sideline Shuffle:
                    </Typography>
                    <Typography
                        variant="h4"
                        component="h2"
                        sx={{
                            color: '#3F4C64',
                            fontFamily: 'Georgia, serif',
                            fontSize: '1.75rem',
                            fontWeight: 600,
                            mb: 2
                        }}
                    >
                        Coaching Impact
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        sx={{
                            color: '#3F4C64',
                            maxWidth: '600px',
                            margin: '0 auto',
                            fontSize: '1.1rem',
                            lineHeight: 1.5,
                            opacity: 0.9
                        }}
                    >
                        Assessing the impact of coaching changes on team performance and rankings
                    </Typography>
                </Box>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        mb: 4,
                        backgroundColor: 'white'
                    }}
                >
                    <Typography
                        variant="h6"
                        component="h3"
                        sx={{
                            mb: 2,
                            color: '#212D40'
                        }}
                    >
                        Select the range of seasons to visualize
                    </Typography>

                    <Box sx={{ mb: 4 }}>
                        <Box
                            sx={{
                                px: 2,
                                position: 'relative',
                                mb: 1
                            }}
                        >
                            <Slider
                                value={seasonRange}
                                onChange={handleSeasonChange}
                                valueLabelDisplay="auto"
                                min={2004}
                                max={2024}
                                valueLabelFormat={(value) => `${value}`}
                                sx={{
                                    color: '#3F4C64',
                                    '& .MuiSlider-thumb': {
                                        '&:hover, &.Mui-focusVisible': {
                                            boxShadow: '0 0 0 8px rgba(63, 76, 100, 0.16)'
                                        }
                                    },
                                    '& .MuiSlider-rail': {
                                        backgroundColor: '#e0e0e0'
                                    },
                                    '& .MuiSlider-valueLabel': {
                                        backgroundColor: '#212D40'
                                    }
                                }}
                            />
                        </Box>

                        <Box
                            sx={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                px: 2,
                                width: '100%'
                            }}
                        >
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    left: '2px'
                                }}
                            >
                                04'
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    right: '2px'
                                }}
                            >
                                24'
                            </Typography>
                        </Box>
                    </Box>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Select Team
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedTeam}
                            onChange={handleTeamChange}
                            displayEmpty
                            sx={{ backgroundColor: 'white' }}
                        >
                            <MenuItem value="">
                                <em>Select a team...</em>
                            </MenuItem>
                            {teams.length > 0 ? (
                                teams.map((team) => (
                                    <MenuItem key={team.teamId} value={team.teamId}>
                                        {team.school}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading teams...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Select Coach
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedCoach}
                            onChange={handleCoachChange}
                            displayEmpty
                            sx={{ backgroundColor: 'white' }}
                        >
                            <MenuItem value="">
                                <em>Select a coach...</em>
                            </MenuItem>
                            {coaches.length > 0 ? (
                                coaches.map((coach) => (
                                    <MenuItem key={coach.coachID} value={coach.coachID}>
                                        {`${coach.firstName} ${coach.lastName}`}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading coaches...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                        <Button
                            variant="contained"
                            onClick={generateVisualization}
                            sx={{
                                backgroundColor: '#212D40',
                                '&:hover': {
                                    backgroundColor: '#3F4C64'
                                }
                            }}
                        >
                            Generate Visualization
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={handleReset}
                            sx={{
                                color: '#212D40',
                                borderColor: '#212D40',
                                '&:hover': {
                                    borderColor: '#3F4C64',
                                    color: '#3F4C64'
                                }
                            }}
                        >
                            Reset
                        </Button>
                    </Box>
                </Paper>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        height: '400px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'white'
                    }}
                >
                    {!visualizationData ? (
                        <Typography color="text.secondary">
                            Select a team and coach, then generate visualization
                        </Typography>
                    ) : (
                        <CoachingImpactVisualization data={visualizationData} />
                    )}
                </Paper>
            </Container>
        </Box>
    );
}

export default SidelineShuffle;

================
File: collegefootballstats.client/src/pages/StarPower.jsx
================
import { Box, Container, Typography, Slider, Select, MenuItem, Button, Paper, RadioGroup, FormControlLabel, Radio, FormControl } from '@mui/material';
import Header from '../components/Header';
import { useState, useEffect } from 'react';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';

function StarPower() {
    const [seasonRange, setSeasonRange] = useState([2004, 2024]);
    const [selectedTeam, setSelectedTeam] = useState('');
    const [selectedConference, setSelectedConference] = useState('');
    const [teams, setTeams] = useState([]);
    const [conferences, setConferences] = useState([]);
    const [visualizationData, setVisualizationData] = useState([]);
    const [selectionType, setSelectionType] = useState('team'); // 'team' or 'conference'

    useEffect(() => {
        fetchTeams();
        fetchConferences();
    }, []);

    const fetchTeams = async () => {
        try {
            const response = await fetch('/api/teams');
            const data = await response.json();
            console.log('Teams fetched:', data);
            if (Array.isArray(data)) {
                setTeams(data);
            } else {
                console.warn('Unexpected teams response format', data);
                setTeams([]);
            }
        } catch (error) {
            console.error('Error fetching teams:', error);
            setTeams([]);
        }
    };

    const fetchConferences = async () => {
        try {
            const response = await fetch('/api/conferences');
            const data = await response.json();
            console.log('Conferences fetched:', data);
            if (Array.isArray(data)) {
                setConferences(data);
            } else {
                console.warn('Unexpected conferences response format', data);
                setConferences([]);
            }
        } catch (error) {
            console.error('Error fetching conferences:', error);
            setConferences([]);
        }
    };

    const handleSeasonChange = (event, newValue) => {
        setSeasonRange(newValue);
    };

    const handleTeamChange = (event) => {
        setSelectedTeam(event.target.value);
    };

    const handleConferenceChange = (event) => {
        setSelectedConference(event.target.value);
    };

    const handleSelectionTypeChange = (event) => {
        setSelectionType(event.target.value);
        setSelectedTeam('');
        setSelectedConference('');
    };

    const handleReset = () => {
        setSeasonRange([2004, 2024]);
        setSelectedTeam('');
        setSelectedConference('');
        setVisualizationData([]);
    };

    const generateVisualization = async () => {
        try {
            const response = await fetch(`/api/teams/draft-performance?team=${selectedTeam}&conference=${selectedConference}&startSeason=${seasonRange[0]}&endSeason=${seasonRange[1]}`);
            const data = await response.json();
            console.log('Visualization data fetched:', data); // Debugging statement
            if (Array.isArray(data) && data.length > 0) {
                setVisualizationData(data);
            } else {
                setVisualizationData([]);
            }
        } catch (error) {
            console.error('Error fetching data:', error);
            setVisualizationData([]);
        }
    };

    useEffect(() => {
        if (selectedTeam || selectedConference) {
            generateVisualization();
        }
    }, [selectedTeam, selectedConference, seasonRange]);

    return (
        <Box sx={{ minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
            <Header />

            <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
                <Box sx={{ textAlign: 'center', mb: 4 }}>
                    <Typography
                        variant="h2"
                        component="h1"
                        sx={{
                            color: '#212D40',
                            fontFamily: 'Georgia, serif',
                            fontSize: '2.5rem',
                            fontWeight: 700,
                            mb: 2
                        }}
                    >
                        Star Power:
                    </Typography>
                    <Typography
                        variant="h4"
                        component="h2"
                        sx={{
                            color: '#3F4C64',
                            fontFamily: 'Georgia, serif',
                            fontSize: '1.75rem',
                            fontWeight: 600,
                            mb: 2
                        }}
                    >
                        Recruit to Pros
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        sx={{
                            color: '#3F4C64',
                            maxWidth: '600px',
                            margin: '0 auto',
                            fontSize: '1.1rem',
                            lineHeight: 1.5,
                            opacity: 0.9
                        }}
                    >
                        Analyzing the correlation between team recruiting quality, rankings, and NFL draft outcomes
                    </Typography>
                </Box>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        mb: 4,
                        backgroundColor: 'white'
                    }}
                >
                    <Typography
                        variant="h6"
                        component="h3"
                        sx={{
                            mb: 2,
                            color: '#212D40'
                        }}
                    >
                        Select the range of seasons to visualize
                    </Typography>

                    <Box sx={{ mb: 4 }}>
                        <Box
                            sx={{
                                px: 2,
                                position: 'relative',
                                mb: 1
                            }}
                        >
                            <Slider
                                value={seasonRange}
                                onChange={handleSeasonChange}
                                valueLabelDisplay="auto"
                                min={2004}
                                max={2024}
                                sx={{
                                    color: '#3F4C64',
                                    '& .MuiSlider-thumb': {
                                        '&:hover, &.Mui-focusVisible': {
                                            boxShadow: '0 0 0 8px rgba(63, 76, 100, 0.16)'
                                        }
                                    },
                                    '& .MuiSlider-rail': {
                                        backgroundColor: '#e0e0e0'
                                    },
                                    '& .MuiSlider-valueLabel': {
                                        backgroundColor: '#212D40'
                                    }
                                }}
                            />
                        </Box>

                        <Box
                            sx={{
                                display: 'flex',
                                justifyContent: 'space-between',
                                px: 2,
                                width: '100%'
                            }}
                        >
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    left: '2px'
                                }}
                            >
                                04'
                            </Typography>
                            <Typography
                                variant="body2"
                                sx={{
                                    color: '#3F4C64',
                                    fontWeight: 500,
                                    position: 'relative',
                                    right: '2px'
                                }}
                            >
                                24'
                            </Typography>
                        </Box>
                    </Box>

                    <FormControl component="fieldset" sx={{ mb: 3 }}>
                        <RadioGroup
                            row
                            name="selection-type"
                            value={selectionType}
                            onChange={handleSelectionTypeChange}
                        >
                            <FormControlLabel
                                value="team"
                                control={
                                    <Radio
                                        sx={{
                                            '&.Mui-checked': {
                                                color: '#3F4C64',
                                            }
                                        }}
                                    />
                                }
                                label="Team"
                            />
                            <FormControlLabel
                                value="conference"
                                control={
                                    <Radio
                                        sx={{
                                            '&.Mui-checked': {
                                                color: '#3F4C64',
                                            }
                                        }}
                                    />
                                }
                                label="Conference"
                            />
                        </RadioGroup>
                    </FormControl>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Select Team
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedTeam}
                            onChange={handleTeamChange}
                            displayEmpty
                            disabled={selectionType !== 'team'}
                            sx={{
                                backgroundColor: 'white',
                                '&.Mui-disabled': {
                                    backgroundColor: '#f5f5f5'
                                }
                            }}
                        >
                            <MenuItem value="">
                                <em>Select a team...</em>
                            </MenuItem>
                            {teams.length > 0 ? (
                                teams.map((team) => (
                                    <MenuItem key={team.teamId} value={team.teamId}>
                                        {team.school}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading teams...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ mb: 3 }}>
                        <Typography sx={{ mb: 1, color: '#212D40' }}>
                            Select Conference
                        </Typography>
                        <Select
                            fullWidth
                            value={selectedConference}
                            onChange={handleConferenceChange}
                            displayEmpty
                            disabled={selectionType !== 'conference'}
                            sx={{
                                backgroundColor: 'white',
                                '&.Mui-disabled': {
                                    backgroundColor: '#f5f5f5'
                                }
                            }}
                        >
                            <MenuItem value="">
                                <em>Select a conference...</em>
                            </MenuItem>
                            {conferences.length > 0 ? (
                                conferences.map((conference) => (
                                    <MenuItem key={conference.conferenceId} value={conference.conferenceId}>
                                        {conference.name}
                                    </MenuItem>
                                ))
                            ) : (
                                <MenuItem disabled>
                                    <em>Loading conferences...</em>
                                </MenuItem>
                            )}
                        </Select>
                    </Box>

                    <Box sx={{ display: 'flex', gap: 2 }}>
                        <Button
                            variant="contained"
                            onClick={generateVisualization}
                            sx={{
                                backgroundColor: '#212D40',
                                '&:hover': {
                                    backgroundColor: '#3F4C64'
                                }
                            }}
                        >
                            Generate Visualization
                        </Button>
                        <Button
                            variant="outlined"
                            onClick={handleReset}
                            sx={{
                                color: '#212D40',
                                borderColor: '#212D40',
                                '&:hover': {
                                    borderColor: '#3F4C64',
                                    color: '#3F4C64'
                                }
                            }}
                        >
                            Reset
                        </Button>
                    </Box>
                </Paper>

                <Paper
                    elevation={2}
                    sx={{
                        p: 4,
                        height: '400px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        backgroundColor: 'white'
                    }}
                >
                    {!visualizationData.length ? (
                        <Typography color="text.secondary">
                            Select options and generate visualization
                        </Typography>
                    ) : (
                        <ResponsiveContainer width="100%" height="100%">
                            <BarChart data={visualizationData}>
                                <CartesianGrid strokeDasharray="3 3" />
                                <XAxis dataKey="season" />
                                <YAxis />
                                <Tooltip />
                                <Legend />
                                <Bar dataKey="rank" fill="#8884d8" />
                                <Bar dataKey="overallPick" fill="#82ca9d" />
                            </BarChart>
                        </ResponsiveContainer>
                    )}
                </Paper>
            </Container>
        </Box>
    );
}

export default StarPower;

================
File: collegefootballstats.client/vite.config.js
================
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
    plugins: [react()],
    server: {
        proxy: {
            '^/api/.*': {
                target: 'https://localhost:7161/',
                secure: false,
                changeOrigin: true,
                rewrite: (path) => path.replace(/^\/api/, '')
            }
        },
        port: 5173
    },
    esbuild: {
        loader: "jsx",
        include: /src\/.*\.jsx?$/
    },
    optimizeDeps: {
        esbuildOptions: {
            loader: {
                '.js': 'jsx'
            }
        }
    }
});

================
File: CollegeFootballStats.Core/CollegeFootballStats.Core.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Dapper.Oracle" Version="2.0.3" />
    <PackageReference Include="Oracle.ManagedDataAccess.Core" Version="23.6.0" />
    <PackageReference Include="System.Data.SqlClient" Version="4.8.6" />
  </ItemGroup>

</Project>

================
File: CollegeFootballStats.Core/ISqlCommand.cs
================
namespace CollegeFootballStats.Core
{
    public interface ISqlCommand
    {
        string Text { get; }
        object? Parameters => null;
    }
}

================
File: CollegeFootballStats.Core/Models/Entities.cs
================
using System.Security.Cryptography.X509Certificates;
using System.Xml.Linq;

namespace CollegeFootballStats.Core.Models
{
    public class Player
    {
        public int PlayerID { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public int? Weight { get; set; }
        public int? Height { get; set; }
        public int? Jersey { get; set; }
        // Year is the school year (1-4), not season
        public int? Year { get; set; }
    }

    public class Team
    {
        public int TeamId { get; set; }
        public string School { get; set; } = string.Empty;
        public string Abbreviation { get; set; } = string.Empty;
    }

    public class Conference
    {
        public int ConferenceId { get; set; }
        public string ShortName { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Classification { get; set; } = string.Empty;
        public string Abbreviation { get; set; } = string.Empty;
    }

    public class StatCategory
    {
        public int Id { get; set; }
        public string Category { get; set; } = string.Empty;
    }

    public class StatType
    {
        public int Id { get; set; }
        public string Type { get; set; } = string.Empty;
    }
    public class TeamRecruitingAndDraftResult
    {
        public string TeamName { get; set; }
        public int DraftYear { get; set; }
        public int DraftRound { get; set; }
        public int DraftRoundPick { get; set; }
        public int DraftOverallPick { get; set; }
        public string PlayerPosition { get; set; }
        public string PlayerFirstName { get; set; }
        public string PlayerLastName { get; set; }
        public string PlayerName => $"{PlayerFirstName} {PlayerLastName}";
        public int PlayerSeason { get; set; }
        public double? PlayerStatValue { get; set; }
        public string TeamRankPoll { get; set; }
        public int TeamRank { get; set; }
        public int TeamRankSeason { get; set; }
    }

    public class TeamDraftPerformance
    {
        public int TeamId { get; set; }
        public int Season { get; set; }
        public int Rank { get; set; }
        public int OverallPick { get; set; }
    }
    public class Coach
    {
        public int CoachID { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
    }

    public class CoachingImpactResult
    {
        public int CoachID { get; set; }
        public string FirstName { get; set; } = string.Empty;
        public string LastName { get; set; } = string.Empty;
        public string School { get; set; } = string.Empty;
        public int Year { get; set; }
        public decimal WinPercentage { get; set; }
        public int APRank { get; set; }
        public int CoachesPollRank { get; set; }
        public int PlayerCommitterRank { get; set; }
    }

    public class PlayerPosition
    {
        public string Position { get; set; } = string.Empty;
    }
}

================
File: CollegeFootballStats.Core/Queries/CoachingImpact.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class CoachingImpact : SqlCommandBase
    {
        public CoachingImpact(string teamID, string coachID, string startYear, string endYear)
        {
            Parameters = new
            {
                TeamID = teamID,
                CoachID = coachID,
                StartYear = startYear,
                EndYear = endYear
            };
        }

        public override string Text => @"
            WITH LastWeekRank AS (
    SELECT 
        P.TeamID,
        P.Season,
        MAX(CASE WHEN P.IsPostSeason = 1 THEN P.Week ELSE NULL END) AS PostSeasonWeek,
        MAX(CASE WHEN P.IsPostSeason = 1 AND P.Poll = 'AP Top 25' THEN P.Rank ELSE NULL END) AS PostSeasonAPRank,
        MAX(CASE WHEN P.IsPostSeason = 1 AND P.Poll = 'Coaches Poll' THEN P.Rank ELSE NULL END) AS PostSeasonCoachesRank,
        MAX(CASE WHEN P.IsPostSeason = 1 AND P.Poll = 'Playoff Committee Rankings' THEN P.Rank ELSE NULL END) AS PostSeasonPlayerCommitterRank,
        MAX(P.Week) AS LastWeek,
        MAX(CASE WHEN P.IsPostSeason = 0 AND P.Poll = 'AP Top 25' AND P.Week = (SELECT MAX(P1.Week) FROM Poll P1 WHERE P1.TeamID = P.TeamID AND P1.Season = P.Season) THEN P.Rank ELSE NULL END) AS LastWeekAPRank,
        MAX(CASE WHEN P.IsPostSeason = 0 AND P.Poll = 'Coaches Poll' AND P.Week = (SELECT MAX(P1.Week) FROM Poll P1 WHERE P1.TeamID = P.TeamID AND P1.Season = P.Season) THEN P.Rank ELSE NULL END) AS LastWeekCoachesRank,
        MAX(CASE WHEN P.IsPostSeason = 0 AND P.Poll = 'Playoff Committee Rankings' AND P.Week = (SELECT MAX(P1.Week) FROM Poll P1 WHERE P1.TeamID = P.TeamID AND P1.Season = P.Season) THEN P.Rank ELSE NULL END) AS LastWeekPlayerCommitterRank
    FROM 
        Poll P
    GROUP BY 
        P.TeamID, P.Season
),
WinPercentage2024 AS (
    SELECT
        G.Season,
        G.HomeTeam AS TeamID,
        COUNT(*) AS TotalGames,
        SUM(CASE WHEN G.HomePoints > G.AwayPoints THEN 1 ELSE 0 END) AS Wins
    FROM Game G
    WHERE G.Season = 2024 AND G.HomeTeam = 213
    GROUP BY G.Season, G.HomeTeam

    UNION ALL

    SELECT
        G.Season,
        G.AwayTeam AS TeamID,
        COUNT(*) AS TotalGames,
        SUM(CASE WHEN G.AwayPoints > G.HomePoints THEN 1 ELSE 0 END) AS Wins
    FROM Game G
    WHERE G.Season = 2024 AND G.AwayTeam = 213
    GROUP BY G.Season, G.AwayTeam
),
TeamWinPercentage2024 AS (
    SELECT
        TeamID,
        Season,
        SUM(TotalGames) AS TotalGames,
        SUM(Wins) AS Wins,
        CAST(((SUM(Wins) * 1.0 / SUM(TotalGames)) * 100) AS DECIMAL) AS WinPercentage
    FROM WinPercentage2024
    GROUP BY TeamID, Season
)
SELECT 
    CR.CoachID,
    C.FirstName,
    C.LastName,
    T.School,
    CR.Year,
    CASE
        WHEN CR.Year = 2024 THEN COALESCE(TWP2024.WinPercentage, 0)
        WHEN CR.Games > 0 THEN CAST(((CR.Wins / CR.Games) * 100) AS DECIMAL)
        ELSE 0
    END AS WinPercentage,
    CASE 
        WHEN LWR.PostSeasonAPRank IS NOT NULL THEN LWR.PostSeasonAPRank
        ELSE LWR.LastWeekAPRank
    END AS APRank,
    CASE 
        WHEN LWR.PostSeasonCoachesRank IS NOT NULL THEN LWR.PostSeasonCoachesRank
        ELSE LWR.LastWeekCoachesRank
    END AS CoachesPollRank,
    CASE 
        WHEN LWR.PostSeasonPlayerCommitterRank IS NOT NULL THEN LWR.PostSeasonPlayerCommitterRank
        ELSE LWR.LastWeekPlayerCommitterRank
    END AS PlayerCommitterRank
FROM 
    CoachingRecord CR
INNER JOIN
    Coach C ON CR.CoachID = C.CoachID
INNER JOIN
    Team T ON CR.TeamID = T.TeamID
LEFT JOIN
    LastWeekRank LWR ON LWR.TeamID = T.TeamID AND LWR.Season = CR.Year
LEFT JOIN
    TeamWinPercentage2024 TWP2024 ON TWP2024.TeamID = CR.TeamID AND TWP2024.Season = CR.Year
WHERE 
    CR.TeamID = :TeamID AND CR.CoachID = :CoachID AND CR.Year BETWEEN :StartYear AND :EndYear
ORDER BY 
    CR.Year";
    }
}

================
File: CollegeFootballStats.Core/Queries/CountTuplesByTable.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class CountTuplesByTable : SqlCommandBase
    {
        private readonly string _tableName;
        public CountTuplesByTable(string tableName)
        {
            _tableName = tableName;
        }

        public override string Text => $"SELECT COUNT(*) FROM {_tableName}";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetAllCoaches.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetAllCoaches : SqlCommandBase
    {
        public override string Text => @"
            SELECT
                *   
            FROM    
                Coach c";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetAllConferences.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetAllConferences : SqlCommandBase
    {
        public GetAllConferences()
        {
        }

        public override string Text => @"
            SELECT
                *
            FROM
                Conference
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetAllPlayerPositions.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetAllPlayerPositions : SqlCommandBase
    {
        public override string Text => @"
            SELECT DISTINCT
                Position   
            FROM    
                Player
            WHERE
                Position IS NOT NULL AND LENGTH(TRIM(Position)) > 0 AND Position <> '?'";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetAllPlayers.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetAllPlayers : SqlCommandBase
    {
        public override string Text => @"
            SELECT
                *
            FROM    
                Player
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetAllTeams.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetAllTeams : SqlCommandBase
    {
        public override string Text => @"
            SELECT
                *   
            FROM    
                Team t";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetCoachesByTeam.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class GetCoachesByTeam : SqlCommandBase
    {
        public GetCoachesByTeam(int teamID)
        {
            Parameters = new
            {
                TeamID = teamID
            };
        }

        public override string Text => @"
            SELECT DISTINCT
                C.CoachID,
                C.FirstName,
                C.LastName
            FROM    
                Coach C
            INNER JOIN
                CoachingRecord CR ON C.CoachID = CR.CoachID
            WHERE
                CR.TeamID = :TeamID 
            AND 
                CR.Year BETWEEN 2004 AND 2024";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetStatCategories.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class GetStatCategories : SqlCommandBase
    {
        public override string Text => @"
            SELECT
                *   
            FROM    
                StatCategory sc";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetStatTypes.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class GetStatTypes : SqlCommandBase
    {
        public override string Text => @"
            SELECT
                *   
            FROM    
                StatType st";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetTeamByAbbreviation.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetTeamByAbbreviation : SqlCommandBase
    {
        public GetTeamByAbbreviation(string abbreviation)
        {
            Parameters = new
            {
                Abbreviation = abbreviation
            };
        }
    
        public override string Text => @"
            SELECT
                *   
            FROM    
                Team t
            WHERE
                t.Abbreviation = :Abbreviation";
    }
}

================
File: CollegeFootballStats.Core/Queries/GetTeamDraftPerformance.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetTeamDraftPerformance : SqlCommandBase
    {
        private readonly int _teamId;
        private readonly int _conferenceId;
        private readonly int _startSeason;
        private readonly int _endSeason;

        public GetTeamDraftPerformance(int teamId, int conferenceId, int startSeason, int endSeason)
        {
            _teamId = teamId;
            _conferenceId = conferenceId;
            _startSeason = startSeason;
            _endSeason = endSeason;
        }

        public override string Text => @"
            SELECT DISTINCT
                t.School AS Team,
                p.Season,
                p.Rank,
                dp.OverallPick
            FROM
                Poll p
                JOIN Team t ON p.TeamID = t.TeamID
                JOIN DraftPick dp ON t.TeamID = dp.CollegeTeam
                JOIN ConferenceMembership cm ON t.TeamID = cm.TeamID AND cm.Year = p.Season
                JOIN Conference c ON cm.ConferenceID = c.ConferenceID
            WHERE
                (:teamId IS NULL OR t.TeamID = :teamId)
                AND (:conferenceId IS NULL OR c.ConferenceID = :conferenceId)
                AND p.Season BETWEEN :startSeason AND :endSeason
            ORDER BY
                p.Season, p.Rank, dp.OverallPick
        ";

        public override object Parameters => new
        {
            teamId = _teamId,
            conferenceId = _conferenceId,
            startSeason = _startSeason,
            endSeason = _endSeason
        };
    }
}

================
File: CollegeFootballStats.Core/Queries/GetTeamRecruitingAndDraft.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class GetTeamRecruitingAndDraft : SqlCommandBase
    {
        public GetTeamRecruitingAndDraft(int startYear, int endYear)
        {
            Parameters = new { StartYear = startYear, EndYear = endYear };
        }
        public override string Text => @"
            SELECT DISTINCT
                t.School AS TeamName,
                dp.Year AS DraftYear,
                dp.Round AS DraftRound,
                dp.RoundPick AS DraftRoundPick,
                dp.OverallPick AS DraftOverallPick,
                p.Position AS PlayerPosition,
                p.FirstName AS PlayerFirstName,
                p.LastName AS PlayerLastName,
                rs.Season AS PlayerSeason,
                ps.StatValue AS PlayerStatValue,
                pr.Poll AS TeamRankPoll,
                pr.Rank AS TeamRank,
                pr.Season AS TeamRankSeason
            FROM 
                DraftPick dp
            JOIN 
                Team t ON dp.CollegeTeam = t.TeamID
            JOIN 
                Player p ON dp.PlayerID = p.PlayerID
            JOIN 
                Roster rs ON rs.TeamID = t.TeamID AND rs.PlayerID = p.PlayerID
            LEFT JOIN 
                PlayerSeasonStat ps ON ps.Player = p.PlayerID AND ps.Season = rs.Season
            LEFT JOIN 
                Poll pr ON pr.TeamID = t.TeamID AND pr.Season = rs.Season
            WHERE 
                dp.Year BETWEEN :StartYear AND :EndYear
            ORDER BY 
                dp.Year, dp.Round, dp.RoundPick
        ";

    }
}

================
File: CollegeFootballStats.Core/Queries/InsertCoach.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertCoach : SqlCommandBase
    {
        public InsertCoach(string firstName, string lastName)
        {
            Parameters = new
            {
                CoachID = 0,
                FirstName = firstName,
                LastName = lastName
            };
        }
        public override string Text => @"
            INSERT INTO Coach
            (
                FirstName,
                LastName
            )
            VALUES
            (
                :FirstName,
                :LastName
            )
            RETURNING CoachID INTO :CoachID
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertCoachingRecord.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class InsertCoachingRecord : SqlCommandBase
    {
        public InsertCoachingRecord(int coachId, int teamId, int year, int games, int wins, int losses, int ties)
        {
            Parameters = new
            {
                CoachID = coachId,
                TeamID = teamId,
                Games = games,
                Year = year,
                Wins = wins,
                Losses = losses,
                Ties = ties
            };
        }
        public override string Text => @"
            INSERT INTO CoachingRecord
            (
                CoachID,
                TeamID,
                Year,
                Games,
                Wins,
                Losses,
                Ties
            )
            VALUES
            (
                :CoachID,
                :TeamID,
                :Year,
                :Games, 
                :Wins,
                :Losses,
                :Ties
            )
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertConference.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertConference : SqlCommandBase
    {
        public InsertConference(int conferenceId, string? name, string? shortName, string? classification, string? abbreviation)
        {
            Parameters = new
            {
                ConferenceId = conferenceId,
                ShortName = name,
                Name = shortName,
                Classification = classification,
                Abbreviation = abbreviation
            };
        }

        public override string Text => @"
            INSERT INTO Conference
            (
                ConferenceID,
                ShortName,
                Name,
                Classification,
                Abbreviation
            )
            VALUES
            (
                :ConferenceId,
                :ShortName,
                :Name,
                :Classification,
                :Abbreviation
            )
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertDraftPick.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertDraftPick : SqlCommandBase
    {
        public InsertDraftPick(int playerId, int collegeTeamId, string nflTeam, string position,
            int year, int round, int roundPick, int overallPick)
        {
            Parameters = new
            {
                DraftPickId = 0,
                PlayerId = playerId,
                CollegeTeam = collegeTeamId,
                NflTeam = nflTeam,
                Position = position,
                Year = year,
                Round = round,
                RoundPick = roundPick,
                OverallPick = overallPick
            };
        }

        public override string Text => @"
            INSERT INTO DraftPick
            (
                PlayerId,
                CollegeTeam,
                NflTeam,
                Position,
                Year,
                Round,
                RoundPick,
                OverallPick
            )
            VALUES
            (
                :PlayerId,
                :CollegeTeam,
                :NflTeam,
                :Position,
                :Year,
                :Round,
                :RoundPick,
                :OverallPick
            )
            RETURNING DraftPickId INTO :DraftPickId
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertGame.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class InsertGame : SqlCommandBase
    {
        public InsertGame(int gameId, DateTime startDateTime, int season, int week, int homeTeamId, 
            int awayTeamId, int? homePoints, int? awayPoints, bool isCompleted, bool isPostseason)
        {
            Parameters = new
            {
                GameId = gameId,
                StartDateTime = startDateTime,
                Season = season,
                Week = week,
                HomeTeam = homeTeamId,
                AwayTeam = awayTeamId,
                HomePoints = homePoints,
                AwayPoints = awayPoints,
                IsCompleted = isCompleted,
                IsPostseason = isPostseason
            };
        }

        public override string Text => @"
            INSERT INTO Game
            (
                GameId,
                StartDateTime,
                Season,
                Week,
                HomeTeam,
                AwayTeam,
                HomePoints,
                AwayPoints,
                IsCompleted,
                IsPostseason
            )   
            VALUES
            (
                :GameId,
                :StartDateTime,
                :Season,
                :Week,
                :HomeTeam,
                :AwayTeam,
                :HomePoints,
                :AwayPoints,
                :IsCompleted,
                :IsPostseason
            )
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertPlayerAndRoster.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertPlayerAndRoster : SqlCommandBase
    {
        public InsertPlayerAndRoster(int playerId, string firstName, string lastName, string position, 
            int? weight, int? year, int? jerseyNo, int? height, int teamId, int season)
        {
            Parameters = new
            {
                PlayerId = playerId,
                FirstName = firstName,
                LastName = lastName,
                Position = position,
                Weight = weight,
                Year = year,
                JerseyNo = jerseyNo,
                Height = height,
                TeamId = teamId,
                Season = season
            };
        }

        // insert the player into the player table if that ID doesn't already exist
        public override string Text => @"
            BEGIN
                DECLARE
                    v_count NUMBER;
                BEGIN
                    SELECT COUNT(*) INTO v_count FROM Player WHERE PlayerId = :PlayerId;
                    IF v_count = 0 THEN
                        INSERT INTO Player (PlayerId, FirstName, LastName, Position, Weight, Year, JerseyNo, Height)
                        VALUES (:PlayerId, :FirstName, :LastName, :Position, :Weight, :Year, :JerseyNo, :Height);
                    END IF;

                    INSERT INTO Roster (TeamId, PlayerId, Season)
                    VALUES (:TeamId, :PlayerId, :Season);
                END;
            END;
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertPlayerSeasonStat.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertPlayerSeasonStat : SqlCommandBase
    {
        public InsertPlayerSeasonStat(int playerId, int seasonId, decimal statValue, string statCategory, string statType)
        {
            Parameters = new
            {
                StatId = 0,
                Player = playerId,
                Season = seasonId,
                StatValue = statValue,
                StatCategory = statCategory,
                StatType = statType
            };
        }
        public override string Text => @"
            INSERT INTO PlayerSeasonStat(
                Player,
                Season,
                StatValue,
                StatCategory,
                StatType
            )
            VALUES(
                :Player,
                :Season,
                :StatValue,
                :StatCategory,
                :StatType
            )
            RETURNING StatID INTO :StatID
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertPoll.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class InsertPoll : SqlCommandBase
    {
        public InsertPoll(string poll, int teamId, int season, int week, int rank, bool isPostseason)
        {
            Parameters = new
            {
                PollId = 0,
                Poll = poll,
                TeamId = teamId,
                Season = season,
                Week = week,
                Rank = rank,
                IsPostseason = isPostseason
            };
        }

        public override string Text => @"
            INSERT INTO Poll
            (
                Poll,
                TeamID,
                Rank,
                Season,
                Week,
                IsPostseason
            )
            VALUES
            (
                :Poll,
                :TeamId,
                :Rank,
                :Season,
                :Week,
                :IsPostseason
            )
            RETURNING PollID INTO :PollID
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertStatCategory.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class InsertStatCategory : SqlCommandBase
    {
        public InsertStatCategory(string category)
        {
            Parameters = new
            {
                ID = 0,
                Category = category
            };
        }

        public override string Text => @"
            INSERT INTO StatCategory
            (
                Category
            )
            VALUES
            (
                :Category
            )
            RETURNING ID INTO :ID
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertStatType.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Core.Queries
{
    public class InsertStatType : SqlCommandBase
    {
        public InsertStatType(string type)
        {
            Parameters = new
            {
                ID = 0,
                Type = type
            };
        }
        public override string Text => @"
            INSERT INTO StatType
            (
                Type
            )
            VALUES
            (
                :Type
            )
            
            RETURNING ID INTO :ID
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertTeam.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertTeam : SqlCommandBase
    {
        public InsertTeam(int teamId, string school, string? abbreviation)
        {
            Parameters = new
            {
                TeamId = teamId,
                School = school,
                Abbreviation = abbreviation
            };
        }
        public override string Text => @"
            INSERT INTO Team
            (
                TeamId,
                School,
                Abbreviation
            )
            VALUES
            (
                :TeamId,
                :School,
                :Abbreviation
            )
        ";
    }
}

================
File: CollegeFootballStats.Core/Queries/InsertTeamGameStat.cs
================
namespace CollegeFootballStats.Core.Queries
{
    public class InsertTeamGameStat : SqlCommandBase
    {
        public InsertTeamGameStat(int gameId, int teamId, decimal statValue, string statCategory)
        {
            Parameters = new
            {
                StatId = 0,
                Game = gameId,
                Team = teamId,
                StatValue = statValue,
                StatCategory = statCategory
            };
        }

        public override string Text => @"
            INSERT INTO TeamGameStat(
                Game,
                Team,
                StatValue,
                StatCategory
            )
            VALUES(
                :Game,
                :Team,
                :StatValue,
                :StatCategory
            )   
            RETURNING StatID INTO :StatID
        ";
    }
}

================
File: CollegeFootballStats.Core/Scripts/Grants.sql
================
GRANT SELECT,INSERT,UPDATE,DELETE ON COACH TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON COACHINGRECORD TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON CONFERENCE TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON CONFERENCEMEMBERSHIP TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON DRAFTPICK TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON GAME TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYER TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON POLL TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON ROSTER TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON TEAM TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON TEAMGAMESTAT TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYERSEASONSTAT TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYERGAMESTAT TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON STATCATEGORY TO "SETH.PAUL";
GRANT SELECT,INSERT,UPDATE,DELETE ON STATTYPE TO "SETH.PAUL";


GRANT SELECT,INSERT,UPDATE,DELETE ON COACH TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON COACHINGRECORD TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON CONFERENCE TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON CONFERENCEMEMBERSHIP TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON DRAFTPICK TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON GAME TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYER TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON POLL TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON ROSTER TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON TEAM TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON TEAMGAMESTAT TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYERSEASONSTAT TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYERGAMESTAT TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON STATCATEGORY TO "REGGIE.SEGOVIA";
GRANT SELECT,INSERT,UPDATE,DELETE ON STATTYPE TO "REGGIE.SEGOVIA";

GRANT SELECT,INSERT,UPDATE,DELETE ON COACH TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON COACHINGRECORD TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON CONFERENCE TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON CONFERENCEMEMBERSHIP TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON DRAFTPICK TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON GAME TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYER TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON POLL TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON ROSTER TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON TEAM TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON TEAMGAMESTAT TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYERSEASONSTAT TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON PLAYERGAMESTAT TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON STATCATEGORY TO "BZANE.SMITH";
GRANT SELECT,INSERT,UPDATE,DELETE ON STATTYPE TO "BZANE.SMITH";

================
File: CollegeFootballStats.Core/Scripts/Tables.sql
================
CREATE TABLE Team(
	TeamID INT NOT NULL,
	School VARCHAR2(50) NOT NULL,
	Abbreviation VARCHAR2(20),
	PRIMARY KEY(TeamID)
);
CREATE TABLE Player(
	PlayerID INT NOT NULL,
	FirstName VARCHAR2(50),
	LastName VARCHAR2(50),
	Position VARCHAR2(20),
	Weight INT,
	Year INT,
	JerseyNo INT,
	Height INT,
	PRIMARY KEY(PlayerID)
);
CREATE TABLE Coach(
	CoachID INT GENERATED ALWAYS AS IDENTITY,
	FirstName VARCHAR2(50),
	LastName VARCHAR2(50),
	PRIMARY KEY(CoachID)
);
CREATE TABLE Conference(
	ConferenceID INT NOT NULL,
	ShortName VARCHAR2(50),
	Name VARCHAR2(100),
	Classification VARCHAR2(20),
	Abbreviation VARCHAR2(20),
	PRIMARY KEY(ConferenceID)
);
CREATE TABLE Game(
	GameID INT NOT NULL,
	StartDateTime DATE,
	Week INT,
	Season INT,
	HomeTeam INT NOT NULL,
	HomePoints INT,
	AwayTeam INT NOT NULL,
	AwayPoints INT,
	IsCompleted NUMBER(1),
	IsPostseason NUMBER(1),
	PRIMARY KEY(GameID),
   	FOREIGN KEY(HomeTeam) REFERENCES Team(TeamID),
    FOREIGN KEY(AwayTeam) REFERENCES Team(TeamID)
);
CREATE TABLE DraftPick(
	DraftPickID INT GENERATED ALWAYS AS IDENTITY,
	PlayerID INT NOT NULL,
	CollegeTeam INT NOT NULL,
	NFLTeam VARCHAR2(50),
	Position VARCHAR2(20),
	Year INT,
	Round INT,
	RoundPick INT,
	OverallPick INT,
	PRIMARY KEY(DraftPickID),
	FOREIGN KEY(PlayerID) REFERENCES Player(PlayerID),
	FOREIGN KEY(CollegeTeam) REFERENCES Team(TeamID)
);
CREATE TABLE Roster(
	TeamID INT NOT NULL,
	PlayerID INT NOT NULL,
	Season INT NOT NULL,
	PRIMARY KEY(PlayerID, TeamID, Season),
	FOREIGN KEY(PlayerID) REFERENCES Player(PlayerID),
	FOREIGN KEY(TeamID) REFERENCES Team(TeamID)
);
CREATE TABLE Poll(
	PollID INT GENERATED ALWAYS AS IDENTITY,
	PollName VarChar2(50),
	TeamID INT NOT NULL,
	Season INT,
	Week INT,
	Rank INT NOT NULL,
	IsPostseason NUMBER(1),
	PRIMARY KEY(PollID),
	FOREIGN KEY(TeamID) REFERENCES Team(TeamID)
);
CREATE TABLE CoachingRecord(
	CoachID INT NOT NULL,
	TeamID INT NOT NULL,
	Year INT NOT NULL,	
	Games INT,
	Wins INT,
	Losses INT,
	Ties INT,
	PRIMARY KEY(CoachID, TeamID, Year),
	FOREIGN KEY(CoachID) REFERENCES Coach(CoachID),
	FOREIGN KEY(TeamID) REFERENCES Team(TeamID)
);
CREATE TABLE ConferenceMembership(
	Year INT NOT NULL,
	TeamID INT NOT NULL,
	ConferenceID INT NOT NULL,
	PRIMARY KEY(ConferenceID, TeamID, Year),
	FOREIGN KEY(ConferenceID) REFERENCES Conference(ConferenceID),
	FOREIGN KEY(TeamID) REFERENCES Team(TeamID)
);
CREATE TABLE TeamGameStat(
	StatID INT GENERATED ALWAYS AS IDENTITY,
	StatValue NUMBER,
	StatCategory INT NOT NULL,
	Game INT NOT NULL,
	Team INT NOT NULL,
	PRIMARY KEY(StatID),
	FOREIGN KEY (Game) REFERENCES Game(GameID),
	FOREIGN KEY (Team) REFERENCES Team(TeamID),
	FOREIGN KEY (StatCategory) REFERENCES StatCategory(ID)
);	
CREATE TABLE PlayerSeasonStat(
	StatID INT GENERATED ALWAYS AS IDENTITY,
	StatValue NUMBER,
	StatType INT NOT NULL,
	StatCategory INT NOT NULL,
	Season INT NOT NULL,
	Player INT NOT NULL,
	PRIMARY KEY(StatID),
	FOREIGN KEY (Player) REFERENCES Player(PlayerID),
	FOREIGN KEY (StatType) REFERENCES StatType(ID),
	FOREIGN KEY (StatCategory) REFERENCES StatCategory(ID)
);
CREATE TABLE PlayerGameStat(
	StatID INT GENERATED ALWAYS AS IDENTITY,
	StatValue NUMBER,
	StatType INT NOT NULL,
	StatCategory INT NOT NULL,
	Game INT NOT NULL,
	Player INT NOT NULL,
	PRIMARY KEY(StatID),
	FOREIGN KEY (Game) REFERENCES Game(GameID),
	FOREIGN KEY (Player) REFERENCES Player(PlayerID),
	FOREIGN KEY (StatType) REFERENCES StatType(ID),
	FOREIGN KEY (StatCategory) REFERENCES StatCategory(ID)
);

CREATE TABLE StatCategory(
	ID INT GENERATED ALWAYS AS IDENTITY,
	Category VARCHAR2(20),
	PRIMARY KEY(ID)
);

CREATE TABLE StatType(
	ID INT GENERATED ALWAYS AS IDENTITY,
	Type VARCHAR2(20),
	PRIMARY KEY(ID)
);

================
File: CollegeFootballStats.Core/SqlCommandBase.cs
================
namespace CollegeFootballStats.Core
{
    public abstract class SqlCommandBase : ISqlCommand
    {
        public abstract string Text { get; }

        public virtual object Parameters { get; protected set; } = null;
    }
}

================
File: CollegeFootballStats.Core/SqlCommandManager.cs
================
using Dapper;
using Oracle.ManagedDataAccess.Client;
using System.Data;

namespace CollegeFootballStats.Core
{
    public class SqlCommandManager
    {
        private readonly string _connectionString;

        public SqlCommandManager(string connectionString)
        {
            _connectionString = connectionString;
        }

        public async Task<IEnumerable<T>> QueryAsync<T>(ISqlCommand query)
        {
            using var conn = new OracleConnection(_connectionString);
            return await conn.QueryAsync<T>(query.Text, query.Parameters);
        }

        public async Task<T> QueryFirstOrDefault<T>(ISqlCommand query)
        {
            using var conn = new OracleConnection(_connectionString);
            return await conn.QueryFirstOrDefaultAsync<T>(query.Text, query.Parameters);
        }   

        public Task ExecuteAsync(ISqlCommand command)
        {
            using var conn = new OracleConnection(_connectionString);
            //await conn.ExecuteAsync(query.Text, query.Parameters);
            conn.Execute(command.Text, command.Parameters);

            return Task.CompletedTask;
        }

        /// <summary>
        /// Executes an insert command and returns the generated ID.
        /// Should be used when you need to get the ID of the inserted record.
        /// </summary>
        /// <typeparam name="T">The type of the ID, e.g., int or long.</typeparam>
        /// <param name="command">The SQL command containing the INSERT statement with a RETURNING clause.</param>
        /// <param name="idParameterName">The name of the output parameter for the ID.</param>
        /// <returns>The generated ID.</returns>
        public async Task<int> InsertAndGetIdAsync<T>(ISqlCommand command, string idParameterName = "ID")
        {
            using var conn = new OracleConnection(_connectionString);

            // Add the output parameter to the DynamicParameters
            var parameters = new DynamicParameters(command.Parameters);
            parameters.Add(idParameterName, dbType: DbType.Int32, direction: ParameterDirection.Output);

            // Execute the query
            await conn.ExecuteAsync(command.Text, parameters);

            // Retrieve the generated ID
            return parameters.Get<int>(idParameterName);
        }

        public Task TruncateTable(string tableName)
        {
            using var conn = new OracleConnection(_connectionString);
            conn.Execute($"TRUNCATE TABLE {tableName}");

            return Task.CompletedTask;
        }

        public Task RollBackChanges()
        {
            using var conn = new OracleConnection(_connectionString);
            conn.Execute("ROLLBACK");
            return Task.CompletedTask;
        }

        public Task CommitChanges()
        {
            using var conn = new OracleConnection(_connectionString);
            conn.Execute("COMMIT");

            return Task.CompletedTask;
        }

        /// <summary>
        /// Returns the number of rows inserted by the bulk insert
        /// </summary>
        /// <param name="dataTable"></param>
        /// <returns></returns>
        public int BulkInsert(DataTable dataTable)
        {
            using var conn = new OracleConnection(_connectionString);
            {
                conn.Open();
                using (OracleBulkCopy bulkCopy = new OracleBulkCopy(conn))
                {
                    bulkCopy.DestinationSchemaName = "\"MATTHEW.BAKER\"";
                    bulkCopy.DestinationTableName = dataTable.TableName;
                    bulkCopy.BatchSize = 1000;
                    foreach (var column in dataTable.Columns)
                    {
                        bulkCopy.ColumnMappings.Add(column.ToString(), column.ToString());
                    }
                    try
                    {
                        bulkCopy.WriteToServer(dataTable);
                        Console.WriteLine("Bulk insert completed successfully.");
                        int rowsInserted = dataTable.Rows.Count;
                        dataTable.Clear(); // safety thing, in case the caller forgets, lol
                        return rowsInserted;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error during bulk insert: {ex.Message} {ex.StackTrace} {ex.InnerException}");
                        throw;
                    }
                }
            }
        }
    }
}

================
File: CollegeFootballStats.Core/TypeHandlers.cs
================
using Dapper;
using System.Data;

namespace CollegeFootballStats.Core
{
    // Stupid Oracle doesn't have a boolean type, so we need to convert it to a number
    public class BoolToNumberHandler : SqlMapper.TypeHandler<bool>
    {
        public override void SetValue(IDbDataParameter parameter, bool value)
        {
            parameter.Value = value ? 1 : 0;
        }

        public override bool Parse(object value)
        {
            return Convert.ToInt32(value) == 1;
        }
    }

    public class DateTimeHandler : SqlMapper.TypeHandler<DateTime>
    {
        public override void SetValue(IDbDataParameter parameter, DateTime value)
        {
            parameter.Value = value;
            parameter.DbType = DbType.DateTime;
        }

        public override DateTime Parse(object value)
        {
            return Convert.ToDateTime(value);
        }
    }
}

================
File: CollegeFootballStats.Importer/ApiModels.cs
================
using CollegeFootballStats.Importer;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CollegeFootballStats.Importer
{
    internal class TeamResponse
    {
        public int Id { get; set; }
        public string School { get; set; } = string.Empty;
        public string? Conference { get; set;} = string.Empty;
        public string? Classification { get; set;} = string.Empty;

        // yes...abbreviation is nullable in the api...guessing we wont use those teams much
        public string? Abbreviation { get; set; }
    }

    internal class CoachResponse
    {
        // Gotta have the dumb underscores because that
        // is what the api returns
        public string First_Name { get; set; }
        public string Last_Name { get; set; }
        public List<CoachSeason> Seasons { get; set; }
        public CoachResponse()
        {
            Seasons = new List<CoachSeason>();
        }

    }

    internal class CoachSeason
    {
        // The give us the school name in the api, but we need the id
        // so we will have to look it up
        public string School { get; set; } = string.Empty;
        public int Year { get; set; }
        public int Games { get; set; }
        public int Wins { get; set; }
        public int Losses { get; set; }
        public int Ties { get; set; }
    }

    internal class GameResponse
    {
        public int Id { get; set; }
        public int Season { get; set; }
        public int Week { get; set; }
        public DateTime Start_Date { get; set; }
        public int Home_Id { get; set; }
        public string Home_Team { get; set; } = string.Empty;
        public int? Home_Points { get; set; }
        public int Away_Id { get; set; }
        public string Away_Team { get; set; } = string.Empty;
        public int? Away_Points { get; set; }
        public bool Completed { get; set; }
        public string Season_Type { get; set; } = string.Empty;
    }

    internal class ConferenceResponse
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string? Short_Name { get; set; }
        public string? Classification { get; set; }
        public string? Abbreviation { get; set; }
    }

    internal class RosterResponse
    {
        public int Id { get; set; }
        public string First_Name { get; set; } = string.Empty;
        public string Last_Name { get; set; } = string.Empty;
        public string Team { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public int? Jersey { get; set; }
        public int? Height { get; set; }
        public int? Weight { get; set; }
        public int? Year { get; set; }
    }
    internal class PollResponse
    {
        public int Season { get; set; }
        public string SeasonType { get; set; }
        public int Week { get; set; }
        public List<ActualPolls> Polls { get; set; }
        public PollResponse()
        {
            Polls = new List<ActualPolls>();
        }
    }

    internal class ActualPolls
    {
        public string Poll { get; set; }
        public List<PollRankings> Ranks { get; set; }
        public ActualPolls()
        {
            Ranks = new List<PollRankings>();
        }
    }

    internal class PollRankings
    {
        public int Rank { get; set; }
        public string School { get; set; } = string.Empty;
    }

    internal class DraftPickResponse
    {
        // Yes.. in the api this can be null...so we will skip it
        public int? CollegeAthleteId { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Year { get; set; }
        public int Round { get; set; }
        public int CollegeId { get; set; }
        public string CollegeTeam { get; set; } = string.Empty;
        public string NFLTeam { get; set; } = string.Empty;
        public string Position { get; set; } = string.Empty;
        public int Pick { get; set; }
        public int Overall { get; set; }
    }

    internal class TeamGameStatResponse
    {
        /// <summary>
        /// The game Id
        /// </summary>
        public int Id { get; set; }
        public List<TeamGameStatTeam> Teams { get; set; }
        public TeamGameStatResponse()
        {
            Teams = new List<TeamGameStatTeam>();
        }
    }

    internal class TeamGameStatTeam
    {
        /// <summary>
        /// The team Id
        /// </summary>
        public int SchoolId { get; set; }
        public string School { get; set; }
        public List<TeamGameStat> Stats { get; set; }
        public TeamGameStatTeam()
        {
            Stats = new List<TeamGameStat>();
        }
    }

    internal class TeamGameStat
    {
        public string Category { get; set; } = string.Empty;
        public string Stat { get; set; } = string.Empty;
    }

    internal class PlayerSeasonStatResponse
    {
        public int? PlayerId { get; set; }
        public string Player { get; set; } = string.Empty;
        public string Team { get; set; } = string.Empty;
        public string Conference { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string StatType { get; set; } = string.Empty;
        public string Stat { get; set; } = string.Empty;
    }

    internal class PlayerGameStatResponse
    {
        /// <summary>
        /// The game ID
        /// </summary>
        public int Id { get; set; }
        public List<PlayerGameStatTeam> Teams { get; set; }
        public PlayerGameStatResponse()
        {
            Teams = new List<PlayerGameStatTeam>();
        }
    }
    internal class PlayerGameStatTeam
    {
        // it gives us the school too but we don't really care
        public List<PlayerGameStatCategory> Categories { get; set; }
        public PlayerGameStatTeam()
        {
            Categories = new List<PlayerGameStatCategory>();
        }
    }
    internal class PlayerGameStatCategory
    {
        public string Name { get; set; } = string.Empty;
        public List<PlayerGameStatType> Types { get; set; }
        public PlayerGameStatCategory()
        {
            Types = new List<PlayerGameStatType>();
        }
    }
    internal class PlayerGameStatType
    {
        public string Name { get; set; } = string.Empty;
        public List<PlayerGameStatAthlete> Athletes { get; set; }
        public PlayerGameStatType()
        {
            Athletes = new List<PlayerGameStatAthlete>();
        }
    }
    internal class PlayerGameStatAthlete
    {
        // PlayerId
        public int? Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Stat { get; set; } = string.Empty;
    }
}

================
File: CollegeFootballStats.Importer/BaseImporter.cs
================
using CollegeFootballStats.Core;
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;

namespace CollegeFootballStats.Importer
{
    internal abstract class BaseImporter
    {
        protected readonly HttpClient _v1APIClient;
        protected readonly HttpClient _v2APIClient;
        protected readonly SqlCommandManager _sqlCommandManager;
        protected readonly ILogger _logger;
        /* 
            Per the API docs:

                Game schedules and scores go back 1869
                Drive, play, stats, and box score data generally go back to 2001
                Historical rosters go back to around 2004
                Polling data goes back to 1936
                Recruiting data goes back to 2000
                NFL Draft data starts in 1967

            So we will start with 2004
        */
        protected const int MIN_SEASON_WEEK = 1;
        protected const int MAX_SEASON_WEEK = 20;
        protected const int DEFAULT_MIN_SEASON = 2004;
        protected const int DEFAULT_MAX_SEASON = 2024;
        protected const string TEAMS_TABLE = "TEAM";
        protected const string PLAYERS_TABLE = "PLAYER";
        protected const string COACHES_TABLE = "COACH";
        protected const string COACHING_RECORDS_TABLE = "COACHINGRECORD";
        protected const string CONFERENCE_MEMBERSHIP_TABLE = "CONFERENCEMEMBERSHIP";
        protected const string CONFERENCE_TABLE = "CONFERENCE";
        protected const string GAMES_TABLE = "GAME";
        protected const string DRAFT_PICKS_TABLE = "DRAFTPICK";
        protected const string ROSTERS_TABLE = "ROSTER";
        protected const string POLLS_TABLE = "POLL";
        protected const string TEAM_GAME_STATS_TABLE = "TEAMGAMESTAT";
        protected const string PLAYER_GAME_STATS_TABLE = "PLAYERGAMESTAT";


        public BaseImporter(ImporterConfig config, ILogger logger)
        {
            _logger = logger;
            _v1APIClient = ConfigureClient(config.ApiV1URL, config.ApiKey);

            if (!string.IsNullOrEmpty(config.ApiV2URL))
            {
                _v2APIClient = ConfigureClient(config.ApiV2URL, config.ApiKey);
            }

            _sqlCommandManager = new SqlCommandManager(config.ConnectionString);
        }

        private HttpClient ConfigureClient(string url, string apiKey)
        {
            var client = new HttpClient();
            client.BaseAddress = new Uri(url);
            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + apiKey);
            return client;
        }

        public abstract Task ImportAsync();

        protected async Task<Dictionary<string, int>> GetUniqueTeamsFromDatabase()
        {
            _logger.LogInformation("Fetching existing teams from database...");
            // The API is going to give us the school name, but we need the team id
            // We also need the team id to respect the FK constraint on the coaching record table
            // So as long as we have the teams in the database, we can look them up
            var teams = (await _sqlCommandManager.QueryAsync<Team>(new GetAllTeams()))
              .GroupBy(t => t.School)
              // ugh, we have to do this dumb grouping because there are a handful of schools/teams
              // that show up in the database multiple times. it seems to be the most reliable way of 
              // dealing with this is grab the earliest id, as its most likely to actually be populated.
              // I may deal with this later with the team importer and remport teams. for now we have to
              // do this dumbassery
              .ToDictionary(g => g.Key, g => g.OrderBy(t => t.TeamId).First().TeamId);

            return teams;
        }

        protected async Task<bool> TableHasRecords(string tableName)
        {
            var result = await _sqlCommandManager.QueryFirstOrDefault<int>(new CountTuplesByTable(tableName));
            return result > 0;
        }

        protected async Task<Dictionary<string, int>> GetStatTypes()
        {
            var statTypes = await _sqlCommandManager.QueryAsync<StatType>(new GetStatTypes());
            return statTypes.ToDictionary(s => s.Type, s => s.Id);
        }

        protected async Task<Dictionary<string, int>> GetStatCategories()
        {
            var statCategories = await _sqlCommandManager.QueryAsync<StatCategory>(new GetStatCategories());
            return statCategories.ToDictionary(s => s.Category, s => s.Id);
        }
    }
}

================
File: CollegeFootballStats.Importer/CoachesImporter.cs
================
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class CoachesImporter : BaseImporter
    {
        public CoachesImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var teams = await GetUniqueTeamsFromDatabase();

            if (teams.Count == 0)
            {
                _logger.LogError("No teams found in database! We pull from the database to save API calls. Please import teams first!");
                return;
            }

            _logger.LogInformation($"Found {teams.Count} teams in the database");

            _logger.LogInformation("Fetching coaches from API...");
            try
            {
                var response = await _v1APIClient.GetFromJsonAsync<List<CoachResponse>>("coaches?minYear=2000&maxYear=2024");
                if (response == null)
                {
                    _logger.LogWarning("No coaches fetched. Exiting...");
                    return;
                }

                _logger.LogInformation($"Fetched {response.Count} coaches");

                _logger.LogInformation("Truncating COACHING_RECORDS and COACHES tables...");
                await _sqlCommandManager.TruncateTable("COACHINGRECORD");
                await _sqlCommandManager.TruncateTable("COACH");

                _logger.LogInformation("Tables truncated...");

                foreach (var coach in response)
                {
                    var insertCoachCommand = new InsertCoach(coach.First_Name, coach.Last_Name);

                    // Ok the API doesn't give us a coach id, presumably because it isn't used elsewhere,
                    // so we need to generate our own
                    int coachId = await _sqlCommandManager.InsertAndGetIdAsync<int>(insertCoachCommand, "CoachID");
                    _logger.LogInformation($"INSERTED COACH: {coach.First_Name} {coach.Last_Name} WITH ID: {coachId}");

                    foreach (var season in coach.Seasons)
                    {
                        if (!teams.ContainsKey(season.School))
                        {
                            _logger.LogWarning($"School {season.School} not found in database!. Skipping season...");
                            continue;
                        }

                        var teamID = teams[season.School];
                        var insertCoachingRecordCommand = new InsertCoachingRecord(coachId, teamID, season.Year, season.Games, season.Wins, season.Losses, season.Ties);
                        await _sqlCommandManager.ExecuteAsync(insertCoachingRecordCommand);
                        _logger.LogInformation($"INSERTED RECORD FOR SEASON: Season: {season.Year} School:{season.School} Games: {season.Games} Wins: {season.Wins} Losses: {season.Losses} Ties: {season.Ties}");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/CollegeFootballStats.Importer.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <UserSecretsId>bd108b1c-4470-4a96-b9bb-ee0d84d96d6d</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="6.0.1" />
    <PackageReference Include="Microsoft.Extensions.Logging" Version="9.0.0" />
    <PackageReference Include="Serilog.Extensions.Logging" Version="8.0.0" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="8.0.4" />
    <PackageReference Include="Serilog.Sinks.Console" Version="6.0.0" />
    <PackageReference Include="Serilog.Sinks.File" Version="6.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\CollegeFootballStats.Core\CollegeFootballStats.Core.csproj" />
  </ItemGroup>

</Project>

================
File: CollegeFootballStats.Importer/Committer.cs
================
using Microsoft.Extensions.Logging;

namespace CollegeFootballStats.Importer
{
    // kind of an anti-pattern because I am not importing, but whatever
    internal class Committer : BaseImporter
    {
        public Committer(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override Task ImportAsync()
        {
            return _sqlCommandManager.CommitChanges();
        }
    }
}

================
File: CollegeFootballStats.Importer/ConferenceMembershipsImporter.cs
================
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Data;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class ConferenceMembershipsImporter : BaseImporter
    {
        public ConferenceMembershipsImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var conferences = (await _sqlCommandManager.QueryAsync<Conference>(new GetAllConferences()))?
                .GroupBy(t => (t.ShortName, t.Classification)) // obnoxious, but there are some with the same short name
                .ToDictionary(c => c.Key, c=> c.OrderBy(x => x.ConferenceId).First().ConferenceId) ?? new Dictionary<(string shortName, string division), int>();

            if (conferences?.Count == 0)
            {
                _logger.LogError("No conferences found in database! Conferences are required to import conference memberships. Please import conferences first!");
                return;
            }

            var teams = (await _sqlCommandManager.QueryAsync<Team>(new GetAllTeams()))?
                .ToDictionary(t => t.TeamId, t => t.TeamId) ?? new Dictionary<int, int>();

            if (teams.Count == 0)
            {
                _logger.LogError("No teams found in database! Teams are required to import conference memberships. Please import teams first!");
                return;
            }

            _logger.LogInformation($"Found {teams.Count} teams in the database");
            
           
            _logger.LogInformation("Fetching teams from API...");

            try
            {
                var dataTable = new DataTable("CONFERENCEMEMBERSHIP");
                dataTable.Columns.Add("YEAR", typeof(int));
                dataTable.Columns.Add("TEAMID", typeof(int));
                dataTable.Columns.Add("CONFERENCEID", typeof(int));

                long conferenceMembershipsImported = 0;
                for (int season = DEFAULT_MIN_SEASON; season <= DEFAULT_MAX_SEASON; season++)
                {
                    long seasonConferenceMembershipsImported = 0;
                    string queryUrl = $"teams?year={season}";
                    var response = (await _v2APIClient.GetFromJsonAsync<List<TeamResponse>>(queryUrl))?
                        .ToList() ?? new List<TeamResponse>();

                    _logger.LogInformation($"Fetched {response.Count} teams for season {season}");

                    foreach (var team in response)
                    {
                        // we don't bother if we don't know who the team is or if they didn't
                        // give us both the conference and division
                        if (teams.ContainsKey(team.Id) && !string.IsNullOrEmpty(team.Conference) && !string.IsNullOrEmpty(team.Classification))
                        {
                            var conferenceId = conferences[(team.Conference, team.Classification)];
                            dataTable.Rows.Add(season, team.Id, conferenceId);
                            seasonConferenceMembershipsImported++;
                            conferenceMembershipsImported++;
                        }
                    }

                    if (dataTable.Rows.Count > 0)
                    {
                        var rowsInserted = _sqlCommandManager.BulkInsert(dataTable);
                        _logger.LogInformation($"Inserted {rowsInserted:N0} conference memberships for season {season}");
                    }
                    else
                    {
                        _logger.LogInformation($"No conference memberships imported for season {season}");
                    }
                }
                _logger.LogInformation($"Inserted {conferenceMembershipsImported:N0} conference memberships");
            }

            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/ConferencesImporter.cs
================
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;


namespace CollegeFootballStats.Importer
{
    internal class ConferencesImporter : BaseImporter
    {
        public ConferencesImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            _logger.LogInformation("Fetching conferences from API...");

            try
            {
                var response = await _v1APIClient.GetFromJsonAsync<List<ConferenceResponse>>("conferences");

                if (response == null)
                {
                    _logger.LogWarning("No conferences fetched. Exiting...");
                    return;
                }

                _logger.LogInformation($"Fetched {response.Count} conferences");

                foreach (var conference in response)
                {
                    var command = new InsertConference(conference.Id, conference.Name, conference.Short_Name, conference.Classification, conference.Abbreviation);
                    await _sqlCommandManager.ExecuteAsync(command);
                    _logger.LogInformation("INSERTED CONFERENCE:" + conference.Id + " " + conference.Name + " " + conference.Short_Name + " " + conference.Classification + " " + conference.Abbreviation);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/DraftPicksImporter.cs
================
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class DraftPicksImporter : BaseImporter
    {
        public DraftPicksImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var teams = await GetUniqueTeamsFromDatabase();

            if (teams.Count == 0)
            {
                _logger.LogError("No teams found in database! Teams are required to import draft picks. Please import teams first!");
            }

            _logger.LogInformation($"Found {teams.Count} teams in the database");

            _logger.LogInformation("Fetching players from database...");
            var players = (await _sqlCommandManager.QueryAsync<Player>(new GetAllPlayers()))
                .Select(x => x.PlayerID)
                .ToHashSet();

            if (players.Count == 0)
            {
                _logger.LogError("No players found in database! Players are required to import draft picks. Please import players first!");
            }

            _logger.LogInformation($"Found {players.Count} teams in the database");

            try
            {
                for (int season = DEFAULT_MIN_SEASON; season <= DEFAULT_MAX_SEASON; season++)
                {
                    _logger.LogInformation($"Fetching draft picks for {season}...");
                    var response = await _v1APIClient.GetFromJsonAsync<List<DraftPickResponse>>($"draft/picks?year={season}");

                    _logger.LogInformation($"Fetched {response.Count} draft picks for {season}");

                    foreach (var pick in response)
                    {
                        // Yes, somehow the ID can be null or < 0, likely for if the draft pick
                        // wasn't from college. Its also possible the draft pick will be from a previous
                        // year's roster that we didn't import or the api didn't have roster infromation for.
                        // In either case, we don't know who it is, so skip it
                        int playerID = pick.CollegeAthleteId.GetValueOrDefault();
                        if (playerID > 0 && players.Contains(playerID))
                        {

                            _logger.LogInformation($"INSERTED DRAFT PICK: PlayerID: {pick.CollegeAthleteId} Name: {pick.Name} CollegeTeam: {pick.CollegeTeam}" +
                             $" NFLTeam: {pick.NFLTeam} Position: {pick.Position} Year: {pick.Year} Round: {pick.Round} RoundPick: {pick.Pick} Overall: {pick.Overall}");

                            var command = new InsertDraftPick(pick.CollegeAthleteId.GetValueOrDefault(), pick.CollegeId, pick.NFLTeam, pick.Position,
                                pick.Year, pick.Round, pick.Pick, pick.Overall);
                            await _sqlCommandManager.ExecuteAsync(command);

                         
                        }
                    }
                }   
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/GamesImporter.cs
================
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class GamesImporter : BaseImporter
    {
        public GamesImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            _logger.LogInformation("Fetching existing teams from database...");

            // We are going to get FK constraint errors if we try to insert games without teams
            var teams = (await _sqlCommandManager.QueryAsync<Team>(new GetAllTeams())).ToList();
            if (teams.Count == 0)
            {
                _logger.LogError("No teams found in database! Teams are required to import games. Please import teams first!");
                return;
            }   

            _logger.LogInformation($"Found {teams.Count} teams in the database");

            try
            {
                for (int season = DEFAULT_MIN_SEASON; season <= DEFAULT_MAX_SEASON; season++) {
                    var response = await _v1APIClient.GetFromJsonAsync<List<GameResponse>>($"games?year={season}&seasonType=both");
                    _logger.LogInformation($"Fetched {response.Count} regular and postseason games for {season} Season: ");
                    foreach (var game in response)
                    {
                        var insertGameCommand = new InsertGame(game.Id, game.Start_Date, game.Season, game.Week, game.Home_Id,
                            game.Away_Id, game.Home_Points, game.Away_Points, game.Completed, game.Season_Type == "postseason");

                        await _sqlCommandManager.ExecuteAsync(insertGameCommand);

                        _logger.LogInformation($"INSERTED RECORD FOR GAME: {game.Id} Date: {game.Start_Date} Season: {game.Season} Week: {game.Week} Home: {game.Home_Team} " +
                            $"Away: {game.Away_Team} Home Points: {game.Home_Points} Away Points: {game.Away_Points} Completed: {game.Completed} Season type: {game.Season_Type}");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/ImporterConfig.cs
================
namespace CollegeFootballStats.Importer
{
    internal record ImporterConfig
    {
        public ImporterConfig(string connectionString, string apiV1Url, string apiKey, string apiV2Url = null)
        {
            ConnectionString = connectionString;
            ApiV1URL = apiV1Url;
            ApiV2URL = apiV2Url;
            ApiKey = apiKey;
        }

        public string ConnectionString { get; set; }
        public string ApiV1URL { get; set; }
        public string? ApiV2URL { get; set; }
        public string ApiKey { get; set; }
    }
}

================
File: CollegeFootballStats.Importer/PlayerGameStatsImporter.cs
================
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Threading.Tasks;
namespace CollegeFootballStats.Importer
{
    internal class PlayerGameStatsImporter : BaseImporter
    {
        public PlayerGameStatsImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }
        public override async Task ImportAsync()
        {
            var playersImported = await TableHasRecords(PLAYERS_TABLE);
            if (!playersImported)
            {
                _logger.LogError("No players found in database! Players are required to import player game stats. Please import players first!");
                return;
            }
            var gamesImported = await TableHasRecords(GAMES_TABLE);
            if (!gamesImported)
            {
                _logger.LogError("No games found in database! Games are required to import player game stats. Please import games first!");
                return;
            }

            var statTypes = await GetStatTypes();
            var statCategories = await GetStatCategories();

            long playerGameStatsImported = 0;
            try
            {
                _logger.LogInformation("Beginning import. This may take a while...");
                var dataTable = new DataTable("PLAYERGAMESTAT");
                dataTable.Columns.Add("STATVALUE", typeof(decimal));
                dataTable.Columns.Add("STATTYPE", typeof(int));
                dataTable.Columns.Add("STATCATEGORY", typeof(int));
                dataTable.Columns.Add("GAME", typeof(int));
                dataTable.Columns.Add("PLAYER", typeof(int));

                // work backwards to prioritize recent data
                // only go to 2014 because this is going to be insane amounts of data
                for (int season = DEFAULT_MAX_SEASON; season >= DEFAULT_MIN_SEASON; season--)
                {
                    dataTable.Clear();
                    long seasonStatsImported = 0;
                    _logger.LogInformation($"Beginning import for season: {season}");
                    for (int week = MIN_SEASON_WEEK; week <= MAX_SEASON_WEEK; week++)
                    {
                        // the 'both' actually works here for seasontype. yay
                        string queryUrl = $"games/players?year={season}&week={week}&seasonType=both";
                        var gameStats = (await _v1APIClient.GetFromJsonAsync<List<PlayerGameStatResponse>>(queryUrl))?.ToList() ?? new List<PlayerGameStatResponse>();
                        _logger.LogInformation($"Found stats for {gameStats?.Count ?? 0} games for week {week} of season {season}");
                        if (gameStats == null || gameStats?.Count() == 0)
                        {
                            _logger.LogInformation("No player game stats found for this week. Skipping...");
                        }
                        // This nested loop isn't as awful as it looks.
                        // yes there are a lot of stats, but there only 2 teams per game
                        // and a handful of categories. this loop just flattens it all out
                        foreach (var game in gameStats)
                        {
                            foreach (var team in game.Teams)
                            {
                                foreach (var category in team.Categories)
                                {
                                    foreach (var type in category.Types)
                                    {
                                        foreach (var athlete in type.Athletes)
                                        {
                                            // We only want stats that we can parse into an aggregatable value
                                            if (decimal.TryParse(athlete.Stat, out decimal statValue) && athlete.Id.GetValueOrDefault() > 0)
                                            {
                                                seasonStatsImported++;
                                                playerGameStatsImported++;

                                                int statTypeId = 0;
                                                int categoryId = 0;
                                                if (statTypes.ContainsKey(type.Name))
                                                {
                                                    statTypeId = statTypes[type.Name];
                                                }
                                                else
                                                {
                                                    statTypeId = await _sqlCommandManager.InsertAndGetIdAsync<int>(new InsertStatType(type.Name));
                                                    statTypes.Add(type.Name, statTypeId);
                                                }

                                                if (statCategories.ContainsKey(category.Name))
                                                {
                                                    categoryId = statCategories[category.Name];
                                                }
                                                else
                                                {
                                                    categoryId = await _sqlCommandManager.InsertAndGetIdAsync<int>(new InsertStatCategory(category.Name));
                                                    statCategories.Add(category.Name, categoryId);
                                                }

                                                dataTable.Rows.Add(
                                                // null
                                                statValue,
                                                statTypeId,
                                                categoryId,
                                                game.Id,
                                                athlete.Id.GetValueOrDefault());
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if (dataTable.Rows.Count > 0)
                        {
                            var rowsInserted = _sqlCommandManager.BulkInsert(dataTable);
                            _logger.LogInformation($"Inserted {rowsInserted:N0} player game stats for week {week} of season {season}");
                        }
                        else
                        {
                            _logger.LogInformation($"No player game stats imported for week {week} of season {season}");
                        }
                    }
                    _logger.LogInformation($"Inserted {seasonStatsImported:N0} player game stats for season {season}");
                }
                _logger.LogInformation($"Inserted {playerGameStatsImported:N0} player game stats");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/PlayerSeasonStatsImporter.cs
================
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Data;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class PlayerSeasonStatsImporter : BaseImporter
    {
        public PlayerSeasonStatsImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var getAllPlayersCommand = new GetAllPlayers();
            var players = (await _sqlCommandManager.QueryAsync<Player>(getAllPlayersCommand))
                .Select(p => p.PlayerID)
                .ToHashSet();
            
            if (players.Count == 0)
            {
                _logger.LogError("No players found in database! Players are required to import player season stats. Please import players first!");
            }

            _logger.LogInformation($"Found {players.Count} players in database");

            var statTypes = await GetStatTypes();
            var statCategories = await GetStatCategories();

            long playerStatsImported = 0;
            try
            {
                _logger.LogInformation("Beginning import. This may take a while...");
                // work backwards to prioritize recent data

                var dataTable = new DataTable("PLAYERSEASONSTAT");
                //dataTable.Columns.Add("STATID", typeof(int));
                dataTable.Columns.Add("STATVALUE", typeof(decimal));
                dataTable.Columns.Add("STATTYPE", typeof(int));
                dataTable.Columns.Add("STATCATEGORY", typeof(int));
                dataTable.Columns.Add("SEASON", typeof(int));
                dataTable.Columns.Add("PLAYER", typeof(int));

                for (int season = DEFAULT_MAX_SEASON; season >= DEFAULT_MIN_SEASON; season--)
                {
                    dataTable.Clear();
                    _logger.LogInformation($"Beginning import for season: {season}");
                    string queryUrl = $"stats/player/season?year={season}";
                    var playerSeasonStats = (await _v1APIClient.GetFromJsonAsync<List<PlayerSeasonStatResponse>>(queryUrl))?
                        .ToList() ?? new List<PlayerSeasonStatResponse>();

                    _logger.LogInformation($"Found {playerSeasonStats?.Count ?? 0:N0} for season {season}");

                    long seasonStatsImported = 0;

                    foreach (var stat in playerSeasonStats)
                    {
                        if (decimal.TryParse(stat.Stat, out decimal statValue) && players.Contains(stat.PlayerId.GetValueOrDefault()))
                        {
                            seasonStatsImported++;
                            playerStatsImported++;

                            int statTypeId = 0;
                            int categoryId = 0;
                            if (statTypes.ContainsKey(stat.StatType))
                            {
                                statTypeId = statTypes[stat.StatType];
                            }
                            else
                            {
                                statTypeId = await _sqlCommandManager.InsertAndGetIdAsync<int>(new InsertStatType(stat.StatType));
                                statTypes.Add(stat.StatType, statTypeId);
                            }

                            if (statCategories.ContainsKey(stat.Category))
                            {
                                categoryId = statCategories[stat.Category];
                            }
                            else
                            {
                                categoryId = await _sqlCommandManager.InsertAndGetIdAsync<int>(new InsertStatCategory(stat.Category));
                                statCategories.Add(stat.Category, categoryId);
                            }

                            dataTable.Rows.Add(
                                //null, 
                                statValue,
                                statTypeId,
                                categoryId,
                                season,
                                stat.PlayerId.GetValueOrDefault());
                        }
                    }

                    if (dataTable.Rows.Count > 0)
                    {
                        var rowsInserted = _sqlCommandManager.BulkInsert(dataTable);
                        _logger.LogInformation($"Inserted {rowsInserted:N0} player season stats for season {season}");
                    }
                    else
                    {
                        _logger.LogInformation($"No player season stats imported for season {season}");
                    }
                }

                _logger.LogInformation($"Imported {playerStatsImported:N0} player season stats");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/PlayersImporter.cs
================
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    // Imports players and rosters
    internal class PlayersImporter : BaseImporter
    {
        public PlayersImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var teams = await GetUniqueTeamsFromDatabase();

            if (teams.Count == 0)
            {
                _logger.LogError("No teams found in database! Teams are required to import players and rosters. Please import teams first!");
                return;
            }

            _logger.LogInformation($"Found {teams.Count} teams in the database");

            try
            {
                _logger.LogInformation("Fetching rosters from API...");
                for (int season = DEFAULT_MIN_SEASON; season <= DEFAULT_MAX_SEASON; season++)
                {
                    var response = await _v1APIClient.GetFromJsonAsync<List<RosterResponse>>($"roster?year={season}");

                    if (response == null)
                    {
                        _logger.LogWarning("No players fetched. Exiting...");
                        return;
                    }

                    _logger.LogInformation($"Fetched {response.Count} players on rosters in Season: {season}");

                    foreach (var player in response)
                    {
                        if (!teams.ContainsKey(player.Team))
                        {
                            _logger.LogWarning($"Team {player.Team} not found in database!. Skipping roster...");
                            continue;
                        }

                        var teamId = teams[player.Team];

                        var command = new InsertPlayerAndRoster(player.Id, player.First_Name, player.Last_Name, player.Position,
                            player.Weight, player.Height, player.Jersey, player.Height, teamId, season);

                        await _sqlCommandManager.ExecuteAsync(command);

                        _logger.LogInformation($"INSERTED PLAYER/ROSTER: PlayerID: {player.Id} First Name: {player.First_Name} Last Name: {player.Last_Name} " +
                            $" Height: {player.Height} Weight: {player.Weight} Jersey {player.Jersey} Year: {player.Year}" +
                            $" Position: {player.Position} Team: {player.Team} Season: {season}");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/PollsImporter.cs
================
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class PollsImporter : BaseImporter
    {
        public PollsImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var teams = await GetUniqueTeamsFromDatabase(); 

            if (teams.Count == 0)
            {
                _logger.LogError("No teams found in database! We pull from the database to save API calls. Please import teams first!");
                return;
            }

            _logger.LogInformation($"Found {teams.Count} teams in the database");

            _logger.LogInformation("Fetching polls from API...");

            try
            {
                for (int i = DEFAULT_MIN_SEASON; i <= DEFAULT_MAX_SEASON; i++)
                {
                    var response = await _v1APIClient.GetFromJsonAsync<List<PollResponse>>($"rankings?year={i}&seasonType=both");
                    _logger.LogInformation($"Fetched {response.Count} regular and postseason polls for {i} Season: ");
                    foreach (var pollResponse in response)
                    {
                        foreach (var poll in pollResponse.Polls)
                        {
                            foreach (var ranking in poll.Ranks)
                            {
                                _logger.LogInformation($"Processing ranking: {ranking.School} with rank {ranking.Rank}");

                                if (!teams.ContainsKey(ranking.School))
                                {
                                    _logger.LogWarning($"School {ranking.School} not found in database! Skipping ranking...");
                                    continue;
                                }

                                var teamId = teams[ranking.School];
                                _logger.LogInformation($"Found team {ranking.School} with TeamID: {teamId}");

                                var insertPollCommand = new InsertPoll(poll.Poll, teamId, pollResponse.Season, pollResponse.Week, ranking.Rank, pollResponse.SeasonType == "postseason");
                                int pollId = await _sqlCommandManager.InsertAndGetIdAsync<int>(insertPollCommand, "PollID");

                                _logger.LogInformation($"INSERTED Poll: {pollId} Name: {poll.Poll} teamID: {teamId} Season: {pollResponse.Season} Week: {pollResponse.Week} Rank: {ranking.Rank} Season Type: {pollResponse.SeasonType}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Importer/Program.cs
================
using CollegeFootballStats.Core;
using CollegeFootballStats.Importer;
using Dapper;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Serilog;

// Set up configuration sources.
var builder = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true)
    .AddUserSecrets<Program>();

IConfiguration configuration = builder.Build();

var connectionString = configuration.GetConnectionString("UFOracle");
var apiV1Url = configuration["CollegeFootballDataApi:V1Url"];
var apiV2Url = configuration["CollegeFootballDataApi:V2Url"];
var apiKey = configuration["CollegeFootballDataApi:ApiKey"];


Console.WriteLine($"Connection String: {connectionString}");
Console.WriteLine($"API V1 Url: {apiV1Url}");
Console.WriteLine($"API V2 Url: {apiV2Url}");
Console.WriteLine($"API Key: {apiKey}");

int workerThreads, completionPortThreads;
ThreadPool.GetAvailableThreads(out workerThreads, out completionPortThreads);

Console.WriteLine($"Available Worker Threads: {workerThreads}");
Console.WriteLine($"Available Completion Port Threads: {completionPortThreads}");

Console.WriteLine($"Processor count: {Environment.ProcessorCount}");

// Configure Serilog
Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Information()
    .WriteTo.Console()
    .WriteTo.File("logs/log.txt", rollingInterval: RollingInterval.Day)
    .CreateLogger();

// Set up dependency injection
var serviceProvider = new ServiceCollection()
    .AddLogging(loggingBuilder =>
    {
        loggingBuilder.AddSerilog(dispose: true);
    })
    .AddSingleton(configuration)
    .BuildServiceProvider();

SqlMapper.RemoveTypeMap(typeof(bool));
SqlMapper.AddTypeHandler(typeof(bool), new BoolToNumberHandler());

// Get the logger from the service provider

// Instantiate the importer and pass the logger
var importerLogger = serviceProvider.GetRequiredService<Microsoft.Extensions.Logging.ILogger<Program>>();

var importerConfig = new ImporterConfig(connectionString, apiV1Url, apiKey, apiV2Url);

int actionChoice = GetAction();

while (actionChoice != (int)ImporterAction.Exit)
{
    BaseImporter importer = null;
    switch ((ImporterAction)actionChoice)
    {
        case ImporterAction.RunImport:
            int importChoice = GetImportAction();
            switch ((ImportType)importChoice)
            {
                case ImportType.Coaches:
                    importer = new CoachesImporter(importerConfig, importerLogger);
                    break;
                case ImportType.Conferences:
                    importer = new ConferencesImporter(importerConfig, importerLogger);
                    break;
                case ImportType.ConferenceMemberships:
                    importer = new ConferenceMembershipsImporter(importerConfig, importerLogger);
                    break;
                case ImportType.DraftPicks:
                    importer = new DraftPicksImporter(importerConfig, importerLogger);
                    break;
                case ImportType.Games:
                    importer = new GamesImporter(importerConfig, importerLogger);
                    break;
                case ImportType.PlayersAndRosters:
                    importer = new PlayersImporter(importerConfig, importerLogger);
                    break;
                case ImportType.PlayerSeasonStats:
                    importer = new PlayerSeasonStatsImporter(importerConfig, importerLogger);
                    break;
                case ImportType.PlayerGameStats:
                    importer = new PlayerGameStatsImporter(importerConfig, importerLogger);
                    break;
                case ImportType.Polls:
                    importer = new PollsImporter(importerConfig, importerLogger);
                    break;
                case ImportType.Teams:
                    importer = new TeamsImporter(importerConfig, importerLogger);
                    break;
                case ImportType.TeamGameStats:
                    importer = new TeamGameStatsImporter(importerConfig, importerLogger);
                    break;
                default:
                    Console.WriteLine("Invalid import type.");
                    break;
            }
            if (importer != null)
            {
                Console.WriteLine("\nImporting data, please wait...");
                await importer.ImportAsync();
                Console.WriteLine("Import complete. DON'T FORGET TO COMMIT YOUR CHANGES!");
            }
            break;
        case ImporterAction.CommitChanges:
            Console.WriteLine("Committing changes, please wait...");
            importer = new Committer(importerConfig, importerLogger);
            await importer.ImportAsync();
            Console.WriteLine("Changes committed.");
            break;
        default:
            break;
    }

    actionChoice = GetAction();
}


int GetImportAction()
{
    bool validImportAction = false;
    int importActionChoice = 0;
    while (!validImportAction)
    {
        Console.WriteLine("\nChoose an import type (Enter the number): ");
        Enum.GetValues<ImportType>().ToList().ForEach(importType =>
        {
            Console.WriteLine($"{(int)importType}: {importType}");
        });

        validImportAction = int.TryParse(Console.ReadLine(), out importActionChoice);
        // if the action is not in the enum, set validAction to false   
        if (!Enum.IsDefined(typeof(ImportType), importActionChoice))
        {
            validImportAction = false;
            Console.WriteLine("Invalid import type.");
        }
    }
    return importActionChoice;
}

int GetAction()
{
    bool validAction = false;
    int actionChoice = 0;
    while (!validAction)
    {
        Console.WriteLine("\nChoose an action (Enter the number):");
        Enum.GetValues<ImporterAction>().ToList().ForEach(action =>
        {
            Console.WriteLine($"{(int)action}: {action}");
        });

        validAction = int.TryParse(Console.ReadLine(), out actionChoice);
        // if the action is not in the enum, set validAction to false   
        if (!Enum.IsDefined(typeof(ImporterAction), actionChoice))
        {
            validAction = false;
            Console.WriteLine("Invalid action.");
        }
    }
    return actionChoice;
}

public enum ImporterAction
{
    Exit = 0,
    RunImport = 1,
    CommitChanges = 2
}

public enum ImportType
{
    Coaches,
    Conferences,
    ConferenceMemberships,
    DraftPicks,
    Games,
    PlayersAndRosters,
    PlayerSeasonStats,
    PlayerGameStats,
    Polls,
    Teams,
    TeamGameStats,
}

================
File: CollegeFootballStats.Importer/TeamGameStatsImporter.cs
================
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Data;
using System.Net.Http.Json;

namespace CollegeFootballStats.Importer
{
    internal class TeamGameStatsImporter : BaseImporter
    {
        public TeamGameStatsImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            var teamsImported = await TableHasRecords(TEAMS_TABLE);
            if (!teamsImported)
            {
                _logger.LogError("No teams found in database! Teams are required to import team game stats. Please import teams first!");
                return;
            }

            var gamesImported = await TableHasRecords(GAMES_TABLE);
            if (!gamesImported)
            {
                _logger.LogError("No games found in database! Games are required to import team game stats. Please import games first!");
                return;
            }

            var statCategories = await GetStatCategories();

            long teamGameStatsImported = 0;
            try
            {
                _logger.LogInformation("Beginning import. This may take a while...");
                var dataTable = new DataTable("TEAMGAMESTAT");
                //dataTable.Columns.Add("STATID", typeof(int));
                dataTable.Columns.Add("STATVALUE", typeof(decimal));
                dataTable.Columns.Add("STATCATEGORY", typeof(int));
                dataTable.Columns.Add("GAME", typeof(int));
                dataTable.Columns.Add("TEAM", typeof(int));

                for (int season = DEFAULT_MAX_SEASON; season >= DEFAULT_MIN_SEASON; season--)
                {
                    _logger.LogInformation($"Beginning import for season: {season}");
                    long seasonStatsImported = 0;
                    for (int week = MIN_SEASON_WEEK; week <= MAX_SEASON_WEEK; week++)
                    {
                        dataTable.Clear();
                        var allGames = new List<TeamGameStatResponse>();
                        // we can't use 'both' for seeason type on this endpoint, throws an error
                        // so unfortunately I have to fetch both
                        string queryUrl = $"games/teams?year={season}&week={week}";
                        var regularSeasonGames = await _v1APIClient.GetFromJsonAsync<List<TeamGameStatResponse>>($"{queryUrl}&seasonType=regular");
                        _logger.LogInformation($"Found stats for {regularSeasonGames?.Count ?? 0} regular season games for week {week} of season {season}");
                        var postSeasonGames = await _v1APIClient.GetFromJsonAsync<List<TeamGameStatResponse>>($"{queryUrl}&seasonType=postseason");
                        _logger.LogInformation($"Found stats for {postSeasonGames?.Count ?? 0} post season games for week {week} of season {season}");

                        allGames.AddRange(regularSeasonGames?.ToList() ?? new List<TeamGameStatResponse>());
                        allGames.AddRange(postSeasonGames?.ToList() ?? new List<TeamGameStatResponse>());

                        foreach (var game in allGames)
                        {
                            // should only be 2 teams
                            foreach (var team in game.Teams)
                            {
                                // will be several stats for each team
                                // so O(n^bajillion) but we 're not going to have that many stats
                                foreach (var stat in team.Stats)
                                {
                                    // We only want stats that we can parse into an aggregatable value
                                    // some stats like possession time or third down efficiency stay as strings
                                    // I could make another column for them, but Im thinking we just don't bother
                                    if (decimal.TryParse(stat.Stat, out decimal statValue))
                                    {
                                        seasonStatsImported++;
                                        teamGameStatsImported++;

                                        int categoryId = 0;
                                        if (statCategories.ContainsKey(stat.Category))
                                        {
                                            categoryId = statCategories[stat.Category];
                                        }
                                        else
                                        {
                                            categoryId = await _sqlCommandManager.InsertAndGetIdAsync<int>(new InsertStatCategory(stat.Category));
                                            statCategories.Add(stat.Category, categoryId);
                                        }

                                        dataTable.Rows.Add(
                                            //null, 
                                            statValue,
                                            categoryId,
                                            game.Id,
                                            team.SchoolId);
                                    }
                                }
                            }
                        }

                        if (dataTable.Rows.Count > 0)
                        {
                            var rowsInserted = _sqlCommandManager.BulkInsert(dataTable);
                            _logger.LogInformation($"Inserted {rowsInserted:N0} team game stats for week {week} of season {season}");
                        }
                        else
                        {
                            _logger.LogInformation($"No team game stats imported for week {week} of season {season}");
                        }
                    }
                    _logger.LogInformation($"Finished import for season: {season} with {seasonStatsImported:N0} stats");
                }
                _logger.LogInformation($"Imported {teamGameStatsImported:N0} team game stats");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }

        }
    }
}

================
File: CollegeFootballStats.Importer/TeamsImporter.cs
================
using CollegeFootballStats.Core.Queries;
using Microsoft.Extensions.Logging;
using System.Net.Http.Json;


namespace CollegeFootballStats.Importer
{
    internal class TeamsImporter : BaseImporter
    {
        public TeamsImporter(ImporterConfig config, ILogger logger) : base(config, logger)
        {
        }

        public override async Task ImportAsync()
        {
            _logger.LogInformation("Fetching teams from API...");

            try
            {
                var response = await _v1APIClient.GetFromJsonAsync<List<TeamResponse>>("teams");

                if (response == null)
                {
                    _logger.LogWarning("No teams fetched. Exiting...");
                    return;
                }

                _logger.LogInformation($"Fetched {response.Count} teams");

                foreach (var team in response)
                {
                    var command = new InsertTeam(team.Id, team.School, team.Abbreviation);
                    await _sqlCommandManager.ExecuteAsync(command);
                    _logger.LogInformation("INSERTED TEAM:" + team.Id + " " + team.School + " " + team.Abbreviation);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
                throw;
            }
        }
    }
}

================
File: CollegeFootballStats.Server/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  }
}

================
File: CollegeFootballStats.Server/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

================
File: CollegeFootballStats.Server/CollegeFootballStats.Server.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <InvariantGlobalization>false</InvariantGlobalization>
    <SpaRoot>..\collegefootballstats.client</SpaRoot>
    <SpaProxyLaunchCommand>npm run dev</SpaProxyLaunchCommand>
    <SpaProxyServerUrl>https://localhost:5173</SpaProxyServerUrl>
    <UserSecretsId>08e25f66-db85-41c7-b51d-c32073c937ea</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="8.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.SpaProxy">
      <Version>8.*-*</Version>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.4.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\collegefootballstats.client\collegefootballstats.client.esproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
    </ProjectReference>
    <ProjectReference Include="..\CollegeFootballStats.Core\CollegeFootballStats.Core.csproj" />
  </ItemGroup>

</Project>

================
File: CollegeFootballStats.Server/CollegeFootballStats.Server.http
================
@CollegeFootballStats.Server_HostAddress = http://localhost:5232

GET {{CollegeFootballStats.Server_HostAddress}}/weatherforecast/
Accept: application/json

###

================
File: CollegeFootballStats.Server/Program.cs
================
using CollegeFootballStats.Core.Queries;
using CollegeFootballStats.Core.Models;
using CollegeFootballStats.Core;
using Dapper;
using CollegeFootballStats.Server;
using Oracle.ManagedDataAccess.Client;
using System.Data.SqlClient;
using System.Data;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();

builder.Services.AddSingleton(sp =>
{
    var connectionString = sp.GetRequiredService<IConfiguration>().GetConnectionString("UFOracle");
    return new SqlCommandManager(connectionString);
});


var app = builder.Build();

app.UseDefaultFiles();
app.UseStaticFiles();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

SqlMapper.RemoveTypeMap(typeof(bool));
SqlMapper.AddTypeHandler(typeof(bool), new BoolToNumberHandler());

var summaries = new[]
{
    "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
};

// query endpoints go here
app.MapGet("/teams", async (SqlCommandManager queryManager) =>
{
    ISqlCommand query = new GetAllTeams();
    var teams = await queryManager
        .QueryAsync<Team>(query);
    
    return Results.Ok(teams.ToList());
});

app.MapGet("/team/{abbreviation}", async(SqlCommandManager queryManager, string abbreviation) =>
{
    // this is some contrived example of passing in a parameter to a query
    ISqlCommand query = new GetTeamByAbbreviation(abbreviation);
    var team = await queryManager
        .QueryFirstOrDefault<Team>(query);

    if (team == null)
    {
        return Results.NotFound();
    }

    return Results.Ok(team);
});

app.MapGet("/team-recruiting-draft-data", async (SqlCommandManager queryManager, int startYear, int endYear) =>
{
    var query = new GetTeamRecruitingAndDraft(startYear, endYear);

    var data = await queryManager.QueryAsync<TeamRecruitingAndDraftResult>(query);
    return Results.Ok(data);
});

app.MapGet("/teams/draft-performance", async (SqlCommandManager queryManager, int teamId, int conferenceId, int startSeason, int endSeason) =>
{
    ISqlCommand query = new GetTeamDraftPerformance(teamId, conferenceId, startSeason, endSeason);
    var result = await queryManager.QueryAsync<TeamDraftPerformance>(query);
    return Results.Ok(result);
});


app.MapGet("/tuples", async (SqlCommandManager queryManager) => {
    var tableNames = new[]
    {
        "TEAM", "COACH", "COACHINGRECORD", "CONFERENCE", "CONFERENCEMEMBERSHIP",
        "DRAFTPICK", "GAME", "ROSTER", "PLAYER", "PLAYERGAMESTAT",
        "PLAYERSEASONSTAT", "POLL", "STATCATEGORY", "STATTYPE", "TEAMGAMESTAT"
    };

    var response = new TupleCount();
    var tasks = tableNames.Select(async tableName =>
        await queryManager.QueryFirstOrDefault<int>(new CountTuplesByTable(tableName))
    ).ToArray();

    var results = await Task.WhenAll(tasks);

    response.Teams = results[0];
    response.Coaches = results[1];
    response.CoachingRecords = results[2];
    response.Conferences = results[3];
    response.ConferenceMemberships = results[4];
    response.DraftPicks = results[5];
    response.Games = results[6];
    response.Rosters = results[7];
    response.Players = results[8];
    response.PlayerGameStats = results[9];
    response.PlayerSeasonStats = results[10];
    response.Polls = results[11];
    response.StatCategories = results[12];
    response.StatTypes = results[13];
    response.TeamGameStats = results[14];

    response.TotalTuples = results.Sum();

    return Results.Ok(response);
});

app.MapGet("/players", async (SqlCommandManager queryManager) =>
{
    ISqlCommand query = new GetAllPlayers();
    var players = await queryManager.QueryAsync<Player>(query);
    return Results.Ok(players.ToList());
});

app.MapGet("/conferences", async (SqlCommandManager queryManager) =>
{
    ISqlCommand query = new GetAllConferences();
    var conferences = await queryManager
        .QueryAsync<Conference>(query);

    return Results.Ok(conferences.ToList());
});

app.MapGet("/coaches", async (SqlCommandManager queryManager) =>
{
    ISqlCommand query = new GetAllCoaches();
    var coaches = await queryManager
        .QueryAsync<Coach>(query);

    return Results.Ok(coaches.ToList());
});

app.MapGet("/coaches/{teamID}", async (SqlCommandManager queryManager, int teamID) =>
{
    ISqlCommand query = new GetCoachesByTeam(teamID);
    var coaches = await queryManager
        .QueryAsync<Coach>(query);

    return Results.Ok(coaches.ToList());
});


app.MapGet("/coaching-impact", async (SqlCommandManager queryManager, string teamId, string coachId, string startYear, string endYear) =>
{
    ISqlCommand query = new CoachingImpact(teamId, coachId, startYear, endYear);
    var result = await queryManager.QueryAsync<CoachingImpactResult>(query);
    return Results.Ok(result);
});

app.MapGet("/player-positions", async (SqlCommandManager queryManager) =>
{
    var query = new GetAllPlayerPositions();
    var result = await queryManager.QueryAsync<PlayerPosition>(query);
    return Results.Ok(result);
});

app.MapFallbackToFile("/index.html");

app.Run();

================
File: CollegeFootballStats.Server/Properties/launchSettings.json
================
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:11364",
      "sslPort": 44364
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5232",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7161;http://localhost:5232",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "ASPNETCORE_HOSTINGSTARTUPASSEMBLIES": "Microsoft.AspNetCore.SpaProxy"
      }
    }
  }
}

================
File: CollegeFootballStats.Server/ResponseModels.cs
================
namespace CollegeFootballStats.Server
{
    public class TupleCount
    {
        public int Coaches { get; set; }
        public int CoachingRecords { get; set; }
        public int Conferences { get; set; }
        public int ConferenceMemberships { get; set; }
        public int DraftPicks { get; set; }
        public int Games { get; set; }
        public int Rosters { get; set; }
        public int Players { get; set; }
        public int PlayerGameStats { get; set; }
        public int PlayerSeasonStats { get; set; }
        public int Polls { get; set; }
        public int StatCategories { get; set; }
        public int StatTypes { get; set; }
        public int Teams { get; set; }
        public int TeamGameStats { get; set; }
        public int TotalTuples { get; set; }
    }

}

================
File: CollegeFootballStats.sln
================
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.8.34511.84
MinimumVisualStudioVersion = 10.0.40219.1
Project("{9A19103F-16F7-4668-BE54-9A1E7A4F7556}") = "CollegeFootballStats.Server", "CollegeFootballStats.Server\CollegeFootballStats.Server.csproj", "{777DC747-EB76-481A-8EB1-31C3329250CA}"
EndProject
Project("{54A90642-561A-4BB1-A94E-469ADEE60C69}") = "collegefootballstats.client", "collegefootballstats.client\collegefootballstats.client.esproj", "{FD70E132-7542-43E5-A7A1-079E82388FFE}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CollegeFootballStats.Core", "CollegeFootballStats.Core\CollegeFootballStats.Core.csproj", "{FAD08567-0A7E-4EC3-A894-1BDCBC43F3D9}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CollegeFootballStats.Importer", "CollegeFootballStats.Importer\CollegeFootballStats.Importer.csproj", "{605B40B4-29C0-4934-B075-3A358930E071}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{777DC747-EB76-481A-8EB1-31C3329250CA}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{777DC747-EB76-481A-8EB1-31C3329250CA}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{777DC747-EB76-481A-8EB1-31C3329250CA}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{777DC747-EB76-481A-8EB1-31C3329250CA}.Release|Any CPU.Build.0 = Release|Any CPU
		{FD70E132-7542-43E5-A7A1-079E82388FFE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{FD70E132-7542-43E5-A7A1-079E82388FFE}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{FD70E132-7542-43E5-A7A1-079E82388FFE}.Debug|Any CPU.Deploy.0 = Debug|Any CPU
		{FD70E132-7542-43E5-A7A1-079E82388FFE}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{FD70E132-7542-43E5-A7A1-079E82388FFE}.Release|Any CPU.Build.0 = Release|Any CPU
		{FD70E132-7542-43E5-A7A1-079E82388FFE}.Release|Any CPU.Deploy.0 = Release|Any CPU
		{FAD08567-0A7E-4EC3-A894-1BDCBC43F3D9}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{FAD08567-0A7E-4EC3-A894-1BDCBC43F3D9}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{FAD08567-0A7E-4EC3-A894-1BDCBC43F3D9}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{FAD08567-0A7E-4EC3-A894-1BDCBC43F3D9}.Release|Any CPU.Build.0 = Release|Any CPU
		{605B40B4-29C0-4934-B075-3A358930E071}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{605B40B4-29C0-4934-B075-3A358930E071}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{605B40B4-29C0-4934-B075-3A358930E071}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{605B40B4-29C0-4934-B075-3A358930E071}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {C915C5D3-15AA-42C8-8939-3CCEC1130A7B}
	EndGlobalSection
EndGlobal

================
File: package.json
================
{
  "dependencies": {
    "@emotion/react": "^11.13.3",
    "@emotion/styled": "^11.13.0",
    "@mui/base": "^5.0.0-beta.61",
    "@mui/icons-material": "^6.1.7",
    "@mui/lab": "^6.0.0-beta.15",
    "@mui/material": "^6.1.7",
    "@mui/system": "^6.1.7",
    "react-router-dom": "^6.28.0",
    "recharts": "^2.13.3"
  }
}

================
File: README.md
================
Clone the project, then in Visual Studio right click on the Solution and choose "Configure Startup Projects":
![image](https://github.com/user-attachments/assets/f477351e-32be-433a-8025-f269fb0681d8)

Choose the radio button for Multiple startup projects, then for both client and server, set the action to "Start". Use the arrow keys to have the Server project start before the client, like so:
![image](https://github.com/user-attachments/assets/99160d7a-9909-4ab7-81f2-1173d9a5f38b)

Hit Apply and then Ok.

Right click on the CollegeFootballStats.Server project and choose "Manage User Secrets":

![image](https://github.com/user-attachments/assets/690db06f-f3af-4a64-a7bd-03f1e610a311)

In the secrets.json file that is created, add a ConnectionStrings::UFOracle entry:

![image](https://github.com/user-attachments/assets/1ded6729-3adb-420c-b78e-eed0253a3596)

Run the app and you should get 2 browsers, one with a Vite UI and a backend API with a Swagger Page.
